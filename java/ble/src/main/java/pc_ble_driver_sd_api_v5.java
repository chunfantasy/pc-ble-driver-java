/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class pc_ble_driver_sd_api_v5 implements pc_ble_driver_sd_api_v5Constants {
  public static long sd_ble_enable(adapter_t adapter, SWIGTYPE_p_unsigned_int p_app_ram_base) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_enable(adapter_t.getCPtr(adapter), adapter, SWIGTYPE_p_unsigned_int.getCPtr(p_app_ram_base));
  }

  public static long sd_ble_cfg_set(adapter_t adapter, long cfg_id, ble_cfg_t p_cfg, long app_ram_base) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_cfg_set(adapter_t.getCPtr(adapter), adapter, cfg_id, ble_cfg_t.getCPtr(p_cfg), p_cfg, app_ram_base);
  }

  public static long sd_ble_uuid_vs_add(adapter_t adapter, ble_uuid128_t p_vs_uuid, long p_uuid_type) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_uuid_vs_add(adapter_t.getCPtr(adapter), adapter, ble_uuid128_t.getCPtr(p_vs_uuid), p_vs_uuid, p_uuid_type);
  }

  public static long sd_ble_uuid_decode(adapter_t adapter, short uuid_le_len, long p_uuid_le, ble_uuid_t p_uuid) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_uuid_decode(adapter_t.getCPtr(adapter), adapter, uuid_le_len, p_uuid_le, ble_uuid_t.getCPtr(p_uuid), p_uuid);
  }

  public static long sd_ble_uuid_encode(adapter_t adapter, ble_uuid_t p_uuid, long p_uuid_le_len, long p_uuid_le) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_uuid_encode(adapter_t.getCPtr(adapter), adapter, ble_uuid_t.getCPtr(p_uuid), p_uuid, p_uuid_le_len, p_uuid_le);
  }

  public static long sd_ble_version_get(adapter_t adapter, ble_version_t p_version) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_version_get(adapter_t.getCPtr(adapter), adapter, ble_version_t.getCPtr(p_version), p_version);
  }

  public static long sd_ble_user_mem_reply(adapter_t adapter, int conn_handle, ble_user_mem_block_t p_block) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_user_mem_reply(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_user_mem_block_t.getCPtr(p_block), p_block);
  }

  public static long sd_ble_opt_set(adapter_t adapter, long opt_id, ble_opt_t p_opt) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_opt_set(adapter_t.getCPtr(adapter), adapter, opt_id, ble_opt_t.getCPtr(p_opt), p_opt);
  }

  public static long sd_ble_opt_get(adapter_t adapter, long opt_id, ble_opt_t p_opt) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_opt_get(adapter_t.getCPtr(adapter), adapter, opt_id, ble_opt_t.getCPtr(p_opt), p_opt);
  }

  public static long sd_ble_gap_addr_set(adapter_t adapter, ble_gap_addr_t p_addr) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_addr_set(adapter_t.getCPtr(adapter), adapter, ble_gap_addr_t.getCPtr(p_addr), p_addr);
  }

  public static long sd_ble_gap_addr_get(adapter_t adapter, ble_gap_addr_t p_addr) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_addr_get(adapter_t.getCPtr(adapter), adapter, ble_gap_addr_t.getCPtr(p_addr), p_addr);
  }

  public static long sd_ble_gap_whitelist_set(adapter_t adapter, SWIGTYPE_p_p_ble_gap_addr_t pp_wl_addrs, short len) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_whitelist_set(adapter_t.getCPtr(adapter), adapter, SWIGTYPE_p_p_ble_gap_addr_t.getCPtr(pp_wl_addrs), len);
  }

  public static long sd_ble_gap_device_identities_set(adapter_t adapter, SWIGTYPE_p_p_ble_gap_id_key_t pp_id_keys, SWIGTYPE_p_p_ble_gap_irk_t pp_local_irks, short len) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_device_identities_set(adapter_t.getCPtr(adapter), adapter, SWIGTYPE_p_p_ble_gap_id_key_t.getCPtr(pp_id_keys), SWIGTYPE_p_p_ble_gap_irk_t.getCPtr(pp_local_irks), len);
  }

  public static long sd_ble_gap_privacy_set(adapter_t adapter, ble_gap_privacy_params_t p_privacy_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_privacy_set(adapter_t.getCPtr(adapter), adapter, ble_gap_privacy_params_t.getCPtr(p_privacy_params), p_privacy_params);
  }

  public static long sd_ble_gap_privacy_get(adapter_t adapter, ble_gap_privacy_params_t p_privacy_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_privacy_get(adapter_t.getCPtr(adapter), adapter, ble_gap_privacy_params_t.getCPtr(p_privacy_params), p_privacy_params);
  }

  public static long sd_ble_gap_adv_data_set(adapter_t adapter, long p_data, short dlen, long p_sr_data, short srdlen) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_adv_data_set(adapter_t.getCPtr(adapter), adapter, p_data, dlen, p_sr_data, srdlen);
  }

  public static long sd_ble_gap_adv_start(adapter_t adapter, ble_gap_adv_params_t p_adv_params, short conn_cfg_tag) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_adv_start(adapter_t.getCPtr(adapter), adapter, ble_gap_adv_params_t.getCPtr(p_adv_params), p_adv_params, conn_cfg_tag);
  }

  public static long sd_ble_gap_adv_stop(adapter_t adapter) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_adv_stop(adapter_t.getCPtr(adapter), adapter);
  }

  public static long sd_ble_gap_conn_param_update(adapter_t adapter, int conn_handle, ble_gap_conn_params_t p_conn_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_conn_param_update(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_conn_params_t.getCPtr(p_conn_params), p_conn_params);
  }

  public static long sd_ble_gap_disconnect(adapter_t adapter, int conn_handle, short hci_status_code) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_disconnect(adapter_t.getCPtr(adapter), adapter, conn_handle, hci_status_code);
  }

  public static long sd_ble_gap_tx_power_set(adapter_t adapter, byte tx_power) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_tx_power_set(adapter_t.getCPtr(adapter), adapter, tx_power);
  }

  public static long sd_ble_gap_appearance_set(adapter_t adapter, int appearance) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_appearance_set(adapter_t.getCPtr(adapter), adapter, appearance);
  }

  public static long sd_ble_gap_appearance_get(adapter_t adapter, SWIGTYPE_p_unsigned_short p_appearance) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_appearance_get(adapter_t.getCPtr(adapter), adapter, SWIGTYPE_p_unsigned_short.getCPtr(p_appearance));
  }

  public static long sd_ble_gap_ppcp_set(adapter_t adapter, ble_gap_conn_params_t p_conn_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_ppcp_set(adapter_t.getCPtr(adapter), adapter, ble_gap_conn_params_t.getCPtr(p_conn_params), p_conn_params);
  }

  public static long sd_ble_gap_ppcp_get(adapter_t adapter, ble_gap_conn_params_t p_conn_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_ppcp_get(adapter_t.getCPtr(adapter), adapter, ble_gap_conn_params_t.getCPtr(p_conn_params), p_conn_params);
  }

  public static long sd_ble_gap_device_name_set(adapter_t adapter, ble_gap_conn_sec_mode_t p_write_perm, long p_dev_name, int len) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_device_name_set(adapter_t.getCPtr(adapter), adapter, ble_gap_conn_sec_mode_t.getCPtr(p_write_perm), p_write_perm, p_dev_name, len);
  }

  public static long sd_ble_gap_device_name_get(adapter_t adapter, long p_dev_name, SWIGTYPE_p_unsigned_short p_len) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_device_name_get(adapter_t.getCPtr(adapter), adapter, p_dev_name, SWIGTYPE_p_unsigned_short.getCPtr(p_len));
  }

  public static long sd_ble_gap_authenticate(adapter_t adapter, int conn_handle, ble_gap_sec_params_t p_sec_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_authenticate(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_sec_params_t.getCPtr(p_sec_params), p_sec_params);
  }

  public static long sd_ble_gap_sec_params_reply(adapter_t adapter, int conn_handle, short sec_status, ble_gap_sec_params_t p_sec_params, ble_gap_sec_keyset_t p_sec_keyset) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_sec_params_reply(adapter_t.getCPtr(adapter), adapter, conn_handle, sec_status, ble_gap_sec_params_t.getCPtr(p_sec_params), p_sec_params, ble_gap_sec_keyset_t.getCPtr(p_sec_keyset), p_sec_keyset);
  }

  public static long sd_ble_gap_auth_key_reply(adapter_t adapter, int conn_handle, short key_type, long p_key) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_auth_key_reply(adapter_t.getCPtr(adapter), adapter, conn_handle, key_type, p_key);
  }

  public static long sd_ble_gap_lesc_dhkey_reply(adapter_t adapter, int conn_handle, ble_gap_lesc_dhkey_t p_dhkey) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_lesc_dhkey_reply(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_lesc_dhkey_t.getCPtr(p_dhkey), p_dhkey);
  }

  public static long sd_ble_gap_keypress_notify(adapter_t adapter, int conn_handle, short kp_not) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_keypress_notify(adapter_t.getCPtr(adapter), adapter, conn_handle, kp_not);
  }

  public static long sd_ble_gap_lesc_oob_data_get(adapter_t adapter, int conn_handle, ble_gap_lesc_p256_pk_t p_pk_own, ble_gap_lesc_oob_data_t p_oobd_own) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_lesc_oob_data_get(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_lesc_p256_pk_t.getCPtr(p_pk_own), p_pk_own, ble_gap_lesc_oob_data_t.getCPtr(p_oobd_own), p_oobd_own);
  }

  public static long sd_ble_gap_lesc_oob_data_set(adapter_t adapter, int conn_handle, ble_gap_lesc_oob_data_t p_oobd_own, ble_gap_lesc_oob_data_t p_oobd_peer) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_lesc_oob_data_set(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_lesc_oob_data_t.getCPtr(p_oobd_own), p_oobd_own, ble_gap_lesc_oob_data_t.getCPtr(p_oobd_peer), p_oobd_peer);
  }

  public static long sd_ble_gap_encrypt(adapter_t adapter, int conn_handle, ble_gap_master_id_t p_master_id, ble_gap_enc_info_t p_enc_info) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_encrypt(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_master_id_t.getCPtr(p_master_id), p_master_id, ble_gap_enc_info_t.getCPtr(p_enc_info), p_enc_info);
  }

  public static long sd_ble_gap_sec_info_reply(adapter_t adapter, int conn_handle, ble_gap_enc_info_t p_enc_info, ble_gap_irk_t p_id_info, ble_gap_sign_info_t p_sign_info) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_sec_info_reply(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_enc_info_t.getCPtr(p_enc_info), p_enc_info, ble_gap_irk_t.getCPtr(p_id_info), p_id_info, ble_gap_sign_info_t.getCPtr(p_sign_info), p_sign_info);
  }

  public static long sd_ble_gap_conn_sec_get(adapter_t adapter, int conn_handle, ble_gap_conn_sec_t p_conn_sec) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_conn_sec_get(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_conn_sec_t.getCPtr(p_conn_sec), p_conn_sec);
  }

  public static long sd_ble_gap_rssi_start(adapter_t adapter, int conn_handle, short threshold_dbm, short skip_count) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_rssi_start(adapter_t.getCPtr(adapter), adapter, conn_handle, threshold_dbm, skip_count);
  }

  public static long sd_ble_gap_rssi_stop(adapter_t adapter, int conn_handle) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_rssi_stop(adapter_t.getCPtr(adapter), adapter, conn_handle);
  }

  public static long sd_ble_gap_rssi_get(adapter_t adapter, int conn_handle, SWIGTYPE_p_signed_char p_rssi) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_rssi_get(adapter_t.getCPtr(adapter), adapter, conn_handle, SWIGTYPE_p_signed_char.getCPtr(p_rssi));
  }

  public static long sd_ble_gap_scan_start(adapter_t adapter, ble_gap_scan_params_t p_scan_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_scan_start(adapter_t.getCPtr(adapter), adapter, ble_gap_scan_params_t.getCPtr(p_scan_params), p_scan_params);
  }

  public static long sd_ble_gap_scan_stop(adapter_t adapter) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_scan_stop(adapter_t.getCPtr(adapter), adapter);
  }

  public static long sd_ble_gap_connect(adapter_t adapter, ble_gap_addr_t p_peer_addr, ble_gap_scan_params_t p_scan_params, ble_gap_conn_params_t p_conn_params, short conn_cfg_tag) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_connect(adapter_t.getCPtr(adapter), adapter, ble_gap_addr_t.getCPtr(p_peer_addr), p_peer_addr, ble_gap_scan_params_t.getCPtr(p_scan_params), p_scan_params, ble_gap_conn_params_t.getCPtr(p_conn_params), p_conn_params, conn_cfg_tag);
  }

  public static long sd_ble_gap_connect_cancel(adapter_t adapter) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_connect_cancel(adapter_t.getCPtr(adapter), adapter);
  }

  public static long sd_ble_gap_phy_update(adapter_t adapter, int conn_handle, ble_gap_phys_t p_gap_phys) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_phy_update(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_phys_t.getCPtr(p_gap_phys), p_gap_phys);
  }

  public static long sd_ble_gap_data_length_update(adapter_t adapter, int conn_handle, ble_gap_data_length_params_t p_dl_params, ble_gap_data_length_limitation_t p_dl_limitation) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gap_data_length_update(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gap_data_length_params_t.getCPtr(p_dl_params), p_dl_params, ble_gap_data_length_limitation_t.getCPtr(p_dl_limitation), p_dl_limitation);
  }

  public static long sd_ble_gatts_service_add(adapter_t adapter, short type, ble_uuid_t p_uuid, SWIGTYPE_p_unsigned_short p_handle) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_service_add(adapter_t.getCPtr(adapter), adapter, type, ble_uuid_t.getCPtr(p_uuid), p_uuid, SWIGTYPE_p_unsigned_short.getCPtr(p_handle));
  }

  public static long sd_ble_gatts_include_add(adapter_t adapter, int service_handle, int inc_srvc_handle, SWIGTYPE_p_unsigned_short p_include_handle) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_include_add(adapter_t.getCPtr(adapter), adapter, service_handle, inc_srvc_handle, SWIGTYPE_p_unsigned_short.getCPtr(p_include_handle));
  }

  public static long sd_ble_gatts_characteristic_add(adapter_t adapter, int service_handle, ble_gatts_char_md_t p_char_md, ble_gatts_attr_t p_attr_char_value, ble_gatts_char_handles_t p_handles) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_characteristic_add(adapter_t.getCPtr(adapter), adapter, service_handle, ble_gatts_char_md_t.getCPtr(p_char_md), p_char_md, ble_gatts_attr_t.getCPtr(p_attr_char_value), p_attr_char_value, ble_gatts_char_handles_t.getCPtr(p_handles), p_handles);
  }

  public static long sd_ble_gatts_descriptor_add(adapter_t adapter, int char_handle, ble_gatts_attr_t p_attr, SWIGTYPE_p_unsigned_short p_handle) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_descriptor_add(adapter_t.getCPtr(adapter), adapter, char_handle, ble_gatts_attr_t.getCPtr(p_attr), p_attr, SWIGTYPE_p_unsigned_short.getCPtr(p_handle));
  }

  public static long sd_ble_gatts_value_set(adapter_t adapter, int conn_handle, int handle, ble_gatts_value_t p_value) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_value_set(adapter_t.getCPtr(adapter), adapter, conn_handle, handle, ble_gatts_value_t.getCPtr(p_value), p_value);
  }

  public static long sd_ble_gatts_value_get(adapter_t adapter, int conn_handle, int handle, ble_gatts_value_t p_value) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_value_get(adapter_t.getCPtr(adapter), adapter, conn_handle, handle, ble_gatts_value_t.getCPtr(p_value), p_value);
  }

  public static long sd_ble_gatts_hvx(adapter_t adapter, int conn_handle, ble_gatts_hvx_params_t p_hvx_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_hvx(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gatts_hvx_params_t.getCPtr(p_hvx_params), p_hvx_params);
  }

  public static long sd_ble_gatts_service_changed(adapter_t adapter, int conn_handle, int start_handle, int end_handle) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_service_changed(adapter_t.getCPtr(adapter), adapter, conn_handle, start_handle, end_handle);
  }

  public static long sd_ble_gatts_rw_authorize_reply(adapter_t adapter, int conn_handle, ble_gatts_rw_authorize_reply_params_t p_rw_authorize_reply_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_rw_authorize_reply(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gatts_rw_authorize_reply_params_t.getCPtr(p_rw_authorize_reply_params), p_rw_authorize_reply_params);
  }

  public static long sd_ble_gatts_sys_attr_set(adapter_t adapter, int conn_handle, long p_sys_attr_data, int len, long flags) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_sys_attr_set(adapter_t.getCPtr(adapter), adapter, conn_handle, p_sys_attr_data, len, flags);
  }

  public static long sd_ble_gatts_sys_attr_get(adapter_t adapter, int conn_handle, long p_sys_attr_data, SWIGTYPE_p_unsigned_short p_len, long flags) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_sys_attr_get(adapter_t.getCPtr(adapter), adapter, conn_handle, p_sys_attr_data, SWIGTYPE_p_unsigned_short.getCPtr(p_len), flags);
  }

  public static long sd_ble_gatts_initial_user_handle_get(adapter_t adapter, SWIGTYPE_p_unsigned_short p_handle) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_initial_user_handle_get(adapter_t.getCPtr(adapter), adapter, SWIGTYPE_p_unsigned_short.getCPtr(p_handle));
  }

  public static long sd_ble_gatts_attr_get(adapter_t adapter, int handle, ble_uuid_t p_uuid, ble_gatts_attr_md_t p_md) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_attr_get(adapter_t.getCPtr(adapter), adapter, handle, ble_uuid_t.getCPtr(p_uuid), p_uuid, ble_gatts_attr_md_t.getCPtr(p_md), p_md);
  }

  public static long sd_ble_gatts_exchange_mtu_reply(adapter_t adapter, int conn_handle, int server_rx_mtu) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gatts_exchange_mtu_reply(adapter_t.getCPtr(adapter), adapter, conn_handle, server_rx_mtu);
  }

  public static long sd_ble_gattc_primary_services_discover(adapter_t adapter, int conn_handle, int start_handle, ble_uuid_t p_srvc_uuid) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_primary_services_discover(adapter_t.getCPtr(adapter), adapter, conn_handle, start_handle, ble_uuid_t.getCPtr(p_srvc_uuid), p_srvc_uuid);
  }

  public static long sd_ble_gattc_relationships_discover(adapter_t adapter, int conn_handle, ble_gattc_handle_range_t p_handle_range) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_relationships_discover(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gattc_handle_range_t.getCPtr(p_handle_range), p_handle_range);
  }

  public static long sd_ble_gattc_characteristics_discover(adapter_t adapter, int conn_handle, ble_gattc_handle_range_t p_handle_range) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_characteristics_discover(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gattc_handle_range_t.getCPtr(p_handle_range), p_handle_range);
  }

  public static long sd_ble_gattc_descriptors_discover(adapter_t adapter, int conn_handle, ble_gattc_handle_range_t p_handle_range) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_descriptors_discover(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gattc_handle_range_t.getCPtr(p_handle_range), p_handle_range);
  }

  public static long sd_ble_gattc_char_value_by_uuid_read(adapter_t adapter, int conn_handle, ble_uuid_t p_uuid, ble_gattc_handle_range_t p_handle_range) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_char_value_by_uuid_read(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_uuid_t.getCPtr(p_uuid), p_uuid, ble_gattc_handle_range_t.getCPtr(p_handle_range), p_handle_range);
  }

  public static long sd_ble_gattc_read(adapter_t adapter, int conn_handle, int handle, int offset) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_read(adapter_t.getCPtr(adapter), adapter, conn_handle, handle, offset);
  }

  public static long sd_ble_gattc_char_values_read(adapter_t adapter, int conn_handle, SWIGTYPE_p_unsigned_short p_handles, int handle_count) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_char_values_read(adapter_t.getCPtr(adapter), adapter, conn_handle, SWIGTYPE_p_unsigned_short.getCPtr(p_handles), handle_count);
  }

  public static long sd_ble_gattc_write(adapter_t adapter, int conn_handle, ble_gattc_write_params_t p_write_params) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_write(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gattc_write_params_t.getCPtr(p_write_params), p_write_params);
  }

  public static long sd_ble_gattc_hv_confirm(adapter_t adapter, int conn_handle, int handle) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_hv_confirm(adapter_t.getCPtr(adapter), adapter, conn_handle, handle);
  }

  public static long sd_ble_gattc_attr_info_discover(adapter_t adapter, int conn_handle, ble_gattc_handle_range_t p_handle_range) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_attr_info_discover(adapter_t.getCPtr(adapter), adapter, conn_handle, ble_gattc_handle_range_t.getCPtr(p_handle_range), p_handle_range);
  }

  public static long sd_ble_gattc_exchange_mtu_request(adapter_t adapter, int conn_handle, int client_rx_mtu) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_exchange_mtu_request(adapter_t.getCPtr(adapter), adapter, conn_handle, client_rx_mtu);
  }

  public static long sd_ble_gattc_evt_char_val_by_uuid_read_rsp_iter(ble_gattc_evt_t p_gattc_evt, ble_gattc_handle_value_t p_iter) {
    return pc_ble_driver_sd_api_v5JNI.sd_ble_gattc_evt_char_val_by_uuid_read_rsp_iter(ble_gattc_evt_t.getCPtr(p_gattc_evt), p_gattc_evt, ble_gattc_handle_value_t.getCPtr(p_iter), p_iter);
  }

  public static long sd_rpc_serial_port_enum(sd_rpc_serial_port_desc_t serial_port_descs, SWIGTYPE_p_unsigned_int size) {
    return pc_ble_driver_sd_api_v5JNI.sd_rpc_serial_port_enum(sd_rpc_serial_port_desc_t.getCPtr(serial_port_descs), serial_port_descs, SWIGTYPE_p_unsigned_int.getCPtr(size));
  }

  public static physical_layer_t sd_rpc_physical_layer_create_uart(String port_name, long baud_rate, sd_rpc_flow_control_t flow_control, sd_rpc_parity_t parity) {
    long cPtr = pc_ble_driver_sd_api_v5JNI.sd_rpc_physical_layer_create_uart(port_name, baud_rate, flow_control.swigValue(), parity.swigValue());
    return (cPtr == 0) ? null : new physical_layer_t(cPtr, false);
  }

  public static data_link_layer_t sd_rpc_data_link_layer_create_bt_three_wire(physical_layer_t physical_layer, long retransmission_interval) {
    long cPtr = pc_ble_driver_sd_api_v5JNI.sd_rpc_data_link_layer_create_bt_three_wire(physical_layer_t.getCPtr(physical_layer), physical_layer, retransmission_interval);
    return (cPtr == 0) ? null : new data_link_layer_t(cPtr, false);
  }

  public static transport_layer_t sd_rpc_transport_layer_create(data_link_layer_t data_link_layer, long response_timeout) {
    long cPtr = pc_ble_driver_sd_api_v5JNI.sd_rpc_transport_layer_create(data_link_layer_t.getCPtr(data_link_layer), data_link_layer, response_timeout);
    return (cPtr == 0) ? null : new transport_layer_t(cPtr, false);
  }

  public static adapter_t sd_rpc_adapter_create(transport_layer_t transport_layer) {
    long cPtr = pc_ble_driver_sd_api_v5JNI.sd_rpc_adapter_create(transport_layer_t.getCPtr(transport_layer), transport_layer);
    return (cPtr == 0) ? null : new adapter_t(cPtr, false);
  }

  public static void sd_rpc_adapter_delete(adapter_t adapter) {
    pc_ble_driver_sd_api_v5JNI.sd_rpc_adapter_delete(adapter_t.getCPtr(adapter), adapter);
  }

  public static long sd_rpc_open(adapter_t adapter, CallBackFunction1 status_handler, CallBackFunction2 event_handler, CallBackFunction3 log_handler) {
    return pc_ble_driver_sd_api_v5JNI.sd_rpc_open(adapter_t.getCPtr(adapter), adapter, status_handler, event_handler, log_handler);
  }

  public static long sd_rpc_close(adapter_t adapter) {
    return pc_ble_driver_sd_api_v5JNI.sd_rpc_close(adapter_t.getCPtr(adapter), adapter);
  }

  public static long sd_rpc_log_handler_severity_filter_set(adapter_t adapter, sd_rpc_log_severity_t severity_filter) {
    return pc_ble_driver_sd_api_v5JNI.sd_rpc_log_handler_severity_filter_set(adapter_t.getCPtr(adapter), adapter, severity_filter.swigValue());
  }

}
