/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}


#include <stdint.h>		// Use the C99 official header


#include "sd_rpc.h"
#include "stdio.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "pc_ble_driver_sd_api_v5JAVA_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_adapter_1t_1internal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  adapter_t *arg1 = (adapter_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->internal = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_adapter_1t_1internal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  result = (void *) ((arg1)->internal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1adapter_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  adapter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (adapter_t *)new adapter_t();
  *(adapter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1adapter_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  adapter_t *arg1 = (adapter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(adapter_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_transport_1layer_1t_1internal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  transport_layer_t *arg1 = (transport_layer_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(transport_layer_t **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->internal = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_transport_1layer_1t_1internal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  transport_layer_t *arg1 = (transport_layer_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(transport_layer_t **)&jarg1; 
  result = (void *) ((arg1)->internal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1transport_1layer_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  transport_layer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (transport_layer_t *)new transport_layer_t();
  *(transport_layer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1transport_1layer_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  transport_layer_t *arg1 = (transport_layer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(transport_layer_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_data_1link_1layer_1t_1internal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  data_link_layer_t *arg1 = (data_link_layer_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(data_link_layer_t **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->internal = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_data_1link_1layer_1t_1internal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  data_link_layer_t *arg1 = (data_link_layer_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(data_link_layer_t **)&jarg1; 
  result = (void *) ((arg1)->internal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1data_1link_1layer_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  data_link_layer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (data_link_layer_t *)new data_link_layer_t();
  *(data_link_layer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1data_1link_1layer_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  data_link_layer_t *arg1 = (data_link_layer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(data_link_layer_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_physical_1layer_1t_1internal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  physical_layer_t *arg1 = (physical_layer_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(physical_layer_t **)&jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->internal = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_physical_1layer_1t_1internal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  physical_layer_t *arg1 = (physical_layer_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(physical_layer_t **)&jarg1; 
  result = (void *) ((arg1)->internal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1physical_1layer_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  physical_layer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (physical_layer_t *)new physical_layer_t();
  *(physical_layer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1physical_1layer_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  physical_layer_t *arg1 = (physical_layer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(physical_layer_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1user_1mem_1block_1t_1p_1mem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_user_mem_block_t *arg1 = (ble_user_mem_block_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_user_mem_block_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_mem = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1user_1mem_1block_1t_1p_1mem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_user_mem_block_t *arg1 = (ble_user_mem_block_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_user_mem_block_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_mem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1user_1mem_1block_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_user_mem_block_t *arg1 = (ble_user_mem_block_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_user_mem_block_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1user_1mem_1block_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_user_mem_block_t *arg1 = (ble_user_mem_block_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_user_mem_block_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1user_1mem_1block_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_user_mem_block_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_user_mem_block_t *)new ble_user_mem_block_t();
  *(ble_user_mem_block_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1user_1mem_1block_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_user_mem_block_t *arg1 = (ble_user_mem_block_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_user_mem_block_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1user_1mem_1request_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_evt_user_mem_request_t *arg1 = (ble_evt_user_mem_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_user_mem_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1user_1mem_1request_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_evt_user_mem_request_t *arg1 = (ble_evt_user_mem_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_user_mem_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1evt_1user_1mem_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_evt_user_mem_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_evt_user_mem_request_t *)new ble_evt_user_mem_request_t();
  *(ble_evt_user_mem_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1evt_1user_1mem_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_evt_user_mem_request_t *arg1 = (ble_evt_user_mem_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_evt_user_mem_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1user_1mem_1release_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_evt_user_mem_release_t *arg1 = (ble_evt_user_mem_release_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_user_mem_release_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1user_1mem_1release_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_evt_user_mem_release_t *arg1 = (ble_evt_user_mem_release_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_user_mem_release_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1user_1mem_1release_1t_1mem_1block_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_evt_user_mem_release_t *arg1 = (ble_evt_user_mem_release_t *) 0 ;
  ble_user_mem_block_t *arg2 = (ble_user_mem_block_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_evt_user_mem_release_t **)&jarg1; 
  arg2 = *(ble_user_mem_block_t **)&jarg2; 
  if (arg1) (arg1)->mem_block = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1user_1mem_1release_1t_1mem_1block_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_evt_user_mem_release_t *arg1 = (ble_evt_user_mem_release_t *) 0 ;
  ble_user_mem_block_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_user_mem_release_t **)&jarg1; 
  result = (ble_user_mem_block_t *)& ((arg1)->mem_block);
  *(ble_user_mem_block_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1evt_1user_1mem_1release_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_evt_user_mem_release_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_evt_user_mem_release_t *)new ble_evt_user_mem_release_t();
  *(ble_evt_user_mem_release_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1evt_1user_1mem_1release_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_evt_user_mem_release_t *arg1 = (ble_evt_user_mem_release_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_evt_user_mem_release_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1evt_1t_1conn_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_common_evt_t *arg1 = (ble_common_evt_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_evt_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1evt_1t_1conn_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_common_evt_t *arg1 = (ble_common_evt_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_evt_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1common_1evt_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_common_evt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_common_evt_t *)new ble_common_evt_t();
  *(ble_common_evt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1common_1evt_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_common_evt_t *arg1 = (ble_common_evt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_common_evt_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1hdr_1t_1evt_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_evt_hdr_t *arg1 = (ble_evt_hdr_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_hdr_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->evt_id = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1hdr_1t_1evt_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_evt_hdr_t *arg1 = (ble_evt_hdr_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_hdr_t **)&jarg1; 
  result = (uint16_t) ((arg1)->evt_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1hdr_1t_1evt_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_evt_hdr_t *arg1 = (ble_evt_hdr_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_hdr_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->evt_len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1hdr_1t_1evt_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_evt_hdr_t *arg1 = (ble_evt_hdr_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_hdr_t **)&jarg1; 
  result = (uint16_t) ((arg1)->evt_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1evt_1hdr_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_evt_hdr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_evt_hdr_t *)new ble_evt_hdr_t();
  *(ble_evt_hdr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1evt_1hdr_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_evt_hdr_t *arg1 = (ble_evt_hdr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_evt_hdr_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1t_1header_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_evt_t *arg1 = (ble_evt_t *) 0 ;
  ble_evt_hdr_t *arg2 = (ble_evt_hdr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_evt_t **)&jarg1; 
  arg2 = *(ble_evt_hdr_t **)&jarg2; 
  if (arg1) (arg1)->header = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1evt_1t_1header_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_evt_t *arg1 = (ble_evt_t *) 0 ;
  ble_evt_hdr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_evt_t **)&jarg1; 
  result = (ble_evt_hdr_t *)& ((arg1)->header);
  *(ble_evt_hdr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1evt_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_evt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_evt_t *)new ble_evt_t();
  *(ble_evt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1evt_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_evt_t *arg1 = (ble_evt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_evt_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1version_1t_1version_1number_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_version_t *arg1 = (ble_version_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_version_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->version_number = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1version_1t_1version_1number_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_version_t *arg1 = (ble_version_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_version_t **)&jarg1; 
  result = (uint8_t) ((arg1)->version_number);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1version_1t_1company_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_version_t *arg1 = (ble_version_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_version_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->company_id = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1version_1t_1company_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_version_t *arg1 = (ble_version_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_version_t **)&jarg1; 
  result = (uint16_t) ((arg1)->company_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1version_1t_1subversion_1number_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_version_t *arg1 = (ble_version_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_version_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->subversion_number = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1version_1t_1subversion_1number_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_version_t *arg1 = (ble_version_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_version_t **)&jarg1; 
  result = (uint16_t) ((arg1)->subversion_number);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1version_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_version_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_version_t *)new ble_version_t();
  *(ble_version_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1version_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_version_t *arg1 = (ble_version_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_version_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1pa_1lna_1cfg_1t_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_pa_lna_cfg_t *arg1 = (ble_pa_lna_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_pa_lna_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->enable = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1pa_1lna_1cfg_1t_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_pa_lna_cfg_t *arg1 = (ble_pa_lna_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_pa_lna_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->enable);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1pa_1lna_1cfg_1t_1active_1high_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_pa_lna_cfg_t *arg1 = (ble_pa_lna_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_pa_lna_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->active_high = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1pa_1lna_1cfg_1t_1active_1high_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_pa_lna_cfg_t *arg1 = (ble_pa_lna_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_pa_lna_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->active_high);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1pa_1lna_1cfg_1t_1gpio_1pin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_pa_lna_cfg_t *arg1 = (ble_pa_lna_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_pa_lna_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->gpio_pin = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1pa_1lna_1cfg_1t_1gpio_1pin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_pa_lna_cfg_t *arg1 = (ble_pa_lna_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_pa_lna_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->gpio_pin);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1pa_1lna_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_pa_lna_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_pa_lna_cfg_t *)new ble_pa_lna_cfg_t();
  *(ble_pa_lna_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1pa_1lna_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_pa_lna_cfg_t *arg1 = (ble_pa_lna_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_pa_lna_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1pa_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  ble_pa_lna_cfg_t *arg2 = (ble_pa_lna_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  arg2 = *(ble_pa_lna_cfg_t **)&jarg2; 
  if (arg1) (arg1)->pa_cfg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1pa_1cfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  ble_pa_lna_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  result = (ble_pa_lna_cfg_t *)& ((arg1)->pa_cfg);
  *(ble_pa_lna_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1lna_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  ble_pa_lna_cfg_t *arg2 = (ble_pa_lna_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  arg2 = *(ble_pa_lna_cfg_t **)&jarg2; 
  if (arg1) (arg1)->lna_cfg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1lna_1cfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  ble_pa_lna_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  result = (ble_pa_lna_cfg_t *)& ((arg1)->lna_cfg);
  *(ble_pa_lna_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1ppi_1ch_1id_1set_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ppi_ch_id_set = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1ppi_1ch_1id_1set_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  result = (uint8_t) ((arg1)->ppi_ch_id_set);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1ppi_1ch_1id_1clr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ppi_ch_id_clr = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1ppi_1ch_1id_1clr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  result = (uint8_t) ((arg1)->ppi_ch_id_clr);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1gpiote_1ch_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->gpiote_ch_id = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1pa_1lna_1t_1gpiote_1ch_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  result = (uint8_t) ((arg1)->gpiote_ch_id);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1common_1opt_1pa_1lna_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_common_opt_pa_lna_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_common_opt_pa_lna_t *)new ble_common_opt_pa_lna_t();
  *(ble_common_opt_pa_lna_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1common_1opt_1pa_1lna_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_common_opt_pa_lna_t *arg1 = (ble_common_opt_pa_lna_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_common_opt_pa_lna_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1conn_1evt_1ext_1t_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_common_opt_conn_evt_ext_t *arg1 = (ble_common_opt_conn_evt_ext_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_conn_evt_ext_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->enable = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1conn_1evt_1ext_1t_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_common_opt_conn_evt_ext_t *arg1 = (ble_common_opt_conn_evt_ext_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_conn_evt_ext_t **)&jarg1; 
  result = (uint8_t) ((arg1)->enable);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1common_1opt_1conn_1evt_1ext_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_common_opt_conn_evt_ext_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_common_opt_conn_evt_ext_t *)new ble_common_opt_conn_evt_ext_t();
  *(ble_common_opt_conn_evt_ext_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1common_1opt_1conn_1evt_1ext_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_common_opt_conn_evt_ext_t *arg1 = (ble_common_opt_conn_evt_ext_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_common_opt_conn_evt_ext_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1t_1pa_1lna_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_common_opt_t *arg1 = (ble_common_opt_t *) 0 ;
  ble_common_opt_pa_lna_t *arg2 = (ble_common_opt_pa_lna_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_common_opt_t **)&jarg1; 
  arg2 = *(ble_common_opt_pa_lna_t **)&jarg2; 
  if (arg1) (arg1)->pa_lna = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1t_1pa_1lna_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_common_opt_t *arg1 = (ble_common_opt_t *) 0 ;
  ble_common_opt_pa_lna_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_t **)&jarg1; 
  result = (ble_common_opt_pa_lna_t *)& ((arg1)->pa_lna);
  *(ble_common_opt_pa_lna_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1t_1conn_1evt_1ext_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_common_opt_t *arg1 = (ble_common_opt_t *) 0 ;
  ble_common_opt_conn_evt_ext_t *arg2 = (ble_common_opt_conn_evt_ext_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_common_opt_t **)&jarg1; 
  arg2 = *(ble_common_opt_conn_evt_ext_t **)&jarg2; 
  if (arg1) (arg1)->conn_evt_ext = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1opt_1t_1conn_1evt_1ext_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_common_opt_t *arg1 = (ble_common_opt_t *) 0 ;
  ble_common_opt_conn_evt_ext_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_opt_t **)&jarg1; 
  result = (ble_common_opt_conn_evt_ext_t *)& ((arg1)->conn_evt_ext);
  *(ble_common_opt_conn_evt_ext_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1common_1opt_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_common_opt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_common_opt_t *)new ble_common_opt_t();
  *(ble_common_opt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1common_1opt_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_common_opt_t *arg1 = (ble_common_opt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_common_opt_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1opt_1t_1common_1opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_opt_t *arg1 = (ble_opt_t *) 0 ;
  ble_common_opt_t *arg2 = (ble_common_opt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_opt_t **)&jarg1; 
  arg2 = *(ble_common_opt_t **)&jarg2; 
  if (arg1) (arg1)->common_opt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1opt_1t_1common_1opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_opt_t *arg1 = (ble_opt_t *) 0 ;
  ble_common_opt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_opt_t **)&jarg1; 
  result = (ble_common_opt_t *)& ((arg1)->common_opt);
  *(ble_common_opt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1opt_1t_1gap_1opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_opt_t *arg1 = (ble_opt_t *) 0 ;
  ble_gap_opt_t *arg2 = (ble_gap_opt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_opt_t **)&jarg1; 
  arg2 = *(ble_gap_opt_t **)&jarg2; 
  if (arg1) (arg1)->gap_opt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1opt_1t_1gap_1opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_opt_t *arg1 = (ble_opt_t *) 0 ;
  ble_gap_opt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_opt_t **)&jarg1; 
  result = (ble_gap_opt_t *)& ((arg1)->gap_opt);
  *(ble_gap_opt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1opt_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_opt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_opt_t *)new ble_opt_t();
  *(ble_opt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1opt_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_opt_t *arg1 = (ble_opt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_opt_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1conn_1cfg_1t_1conn_1cfg_1tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_conn_cfg_t *arg1 = (ble_conn_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_conn_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->conn_cfg_tag = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1conn_1cfg_1t_1conn_1cfg_1tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_conn_cfg_t *arg1 = (ble_conn_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_conn_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->conn_cfg_tag);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_conn_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_conn_cfg_t *)new ble_conn_cfg_t();
  *(ble_conn_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_conn_cfg_t *arg1 = (ble_conn_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_conn_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1cfg_1vs_1uuid_1t_1vs_1uuid_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_common_cfg_vs_uuid_t *arg1 = (ble_common_cfg_vs_uuid_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_cfg_vs_uuid_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vs_uuid_count = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1cfg_1vs_1uuid_1t_1vs_1uuid_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_common_cfg_vs_uuid_t *arg1 = (ble_common_cfg_vs_uuid_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_cfg_vs_uuid_t **)&jarg1; 
  result = (uint8_t) ((arg1)->vs_uuid_count);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1common_1cfg_1vs_1uuid_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_common_cfg_vs_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_common_cfg_vs_uuid_t *)new ble_common_cfg_vs_uuid_t();
  *(ble_common_cfg_vs_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1common_1cfg_1vs_1uuid_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_common_cfg_vs_uuid_t *arg1 = (ble_common_cfg_vs_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_common_cfg_vs_uuid_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1cfg_1t_1vs_1uuid_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_common_cfg_t *arg1 = (ble_common_cfg_t *) 0 ;
  ble_common_cfg_vs_uuid_t *arg2 = (ble_common_cfg_vs_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_common_cfg_t **)&jarg1; 
  arg2 = *(ble_common_cfg_vs_uuid_t **)&jarg2; 
  if (arg1) (arg1)->vs_uuid_cfg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1common_1cfg_1t_1vs_1uuid_1cfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_common_cfg_t *arg1 = (ble_common_cfg_t *) 0 ;
  ble_common_cfg_vs_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_common_cfg_t **)&jarg1; 
  result = (ble_common_cfg_vs_uuid_t *)& ((arg1)->vs_uuid_cfg);
  *(ble_common_cfg_vs_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1common_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_common_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_common_cfg_t *)new ble_common_cfg_t();
  *(ble_common_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1common_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_common_cfg_t *arg1 = (ble_common_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_common_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1cfg_1t_1conn_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_cfg_t *arg1 = (ble_cfg_t *) 0 ;
  ble_conn_cfg_t *arg2 = (ble_conn_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_cfg_t **)&jarg1; 
  arg2 = *(ble_conn_cfg_t **)&jarg2; 
  if (arg1) (arg1)->conn_cfg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1cfg_1t_1conn_1cfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_cfg_t *arg1 = (ble_cfg_t *) 0 ;
  ble_conn_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_cfg_t **)&jarg1; 
  result = (ble_conn_cfg_t *)& ((arg1)->conn_cfg);
  *(ble_conn_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1cfg_1t_1common_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_cfg_t *arg1 = (ble_cfg_t *) 0 ;
  ble_common_cfg_t *arg2 = (ble_common_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_cfg_t **)&jarg1; 
  arg2 = *(ble_common_cfg_t **)&jarg2; 
  if (arg1) (arg1)->common_cfg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1cfg_1t_1common_1cfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_cfg_t *arg1 = (ble_cfg_t *) 0 ;
  ble_common_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_cfg_t **)&jarg1; 
  result = (ble_common_cfg_t *)& ((arg1)->common_cfg);
  *(ble_common_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1cfg_1t_1gap_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_cfg_t *arg1 = (ble_cfg_t *) 0 ;
  ble_gap_cfg_t *arg2 = (ble_gap_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_cfg_t **)&jarg1; 
  arg2 = *(ble_gap_cfg_t **)&jarg2; 
  if (arg1) (arg1)->gap_cfg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1cfg_1t_1gap_1cfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_cfg_t *arg1 = (ble_cfg_t *) 0 ;
  ble_gap_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_cfg_t **)&jarg1; 
  result = (ble_gap_cfg_t *)& ((arg1)->gap_cfg);
  *(ble_gap_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1cfg_1t_1gatts_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_cfg_t *arg1 = (ble_cfg_t *) 0 ;
  ble_gatts_cfg_t *arg2 = (ble_gatts_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_cfg_t **)&jarg1; 
  arg2 = *(ble_gatts_cfg_t **)&jarg2; 
  if (arg1) (arg1)->gatts_cfg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1cfg_1t_1gatts_1cfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_cfg_t *arg1 = (ble_cfg_t *) 0 ;
  ble_gatts_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_cfg_t **)&jarg1; 
  result = (ble_gatts_cfg_t *)& ((arg1)->gatts_cfg);
  *(ble_gatts_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_cfg_t *)new ble_cfg_t();
  *(ble_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_cfg_t *arg1 = (ble_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2; 
  result = (uint32_t)sd_ble_enable(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint32_t arg2 ;
  ble_cfg_t *arg3 = (ble_cfg_t *) 0 ;
  uint32_t arg4 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = *(ble_cfg_t **)&jarg3; 
  arg4 = (uint32_t)jarg4; 
  result = (uint32_t)sd_ble_cfg_set(arg1,arg2,(ble_cfg_t const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1uuid_1vs_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, void * jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_uuid128_t *arg2 = (ble_uuid128_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_uuid128_t **)&jarg2; 
  arg3 = (uint8_t *)jarg3; 
  result = (uint32_t)sd_ble_uuid_vs_add(arg1,(ble_uuid128_t const *)arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1uuid_1decode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, void * jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint8_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  ble_uuid_t *arg4 = (ble_uuid_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t *)jarg3; 
  arg4 = *(ble_uuid_t **)&jarg4; 
  result = (uint32_t)sd_ble_uuid_decode(arg1,arg2,(unsigned char const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1uuid_1encode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, void * jarg3, void * jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_uuid_t *arg2 = (ble_uuid_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_uuid_t **)&jarg2; 
  arg3 = (uint8_t *)jarg3; 
  arg4 = (uint8_t *)jarg4; 
  result = (uint32_t)sd_ble_uuid_encode(arg1,(ble_uuid_t const *)arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_version_t *arg2 = (ble_version_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_version_t **)&jarg2; 
  result = (uint32_t)sd_ble_version_get(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1user_1mem_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_user_mem_block_t *arg3 = (ble_user_mem_block_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_user_mem_block_t **)&jarg3; 
  result = (uint32_t)sd_ble_user_mem_reply(arg1,arg2,(ble_user_mem_block_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1opt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint32_t arg2 ;
  ble_opt_t *arg3 = (ble_opt_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = *(ble_opt_t **)&jarg3; 
  result = (uint32_t)sd_ble_opt_set(arg1,arg2,(ble_opt_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1opt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint32_t arg2 ;
  ble_opt_t *arg3 = (ble_opt_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = *(ble_opt_t **)&jarg3; 
  result = (uint32_t)sd_ble_opt_get(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1addr_1t_1addr_1id_1peer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_addr_t *arg1 = (ble_gap_addr_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_addr_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->addr_id_peer = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1addr_1t_1addr_1id_1peer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_addr_t *arg1 = (ble_gap_addr_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_addr_t **)&jarg1; 
  result = (uint8_t) ((arg1)->addr_id_peer);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1addr_1t_1addr_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_addr_t *arg1 = (ble_gap_addr_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_addr_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->addr_type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1addr_1t_1addr_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_addr_t *arg1 = (ble_gap_addr_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_addr_t **)&jarg1; 
  result = (uint8_t) ((arg1)->addr_type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1addr_1t_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_addr_t *arg1 = (ble_gap_addr_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_addr_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->addr;
    for (ii = 0; ii < (size_t)(6); ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1addr_1t_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_addr_t *arg1 = (ble_gap_addr_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_addr_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->addr);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1addr_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_addr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_addr_t *)new ble_gap_addr_t();
  *(ble_gap_addr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1addr_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_addr_t *arg1 = (ble_gap_addr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_addr_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1params_1t_1min_1conn_1interval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_conn_params_t *arg1 = (ble_gap_conn_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->min_conn_interval = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1params_1t_1min_1conn_1interval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_conn_params_t *arg1 = (ble_gap_conn_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->min_conn_interval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1params_1t_1max_1conn_1interval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_conn_params_t *arg1 = (ble_gap_conn_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->max_conn_interval = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1params_1t_1max_1conn_1interval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_conn_params_t *arg1 = (ble_gap_conn_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->max_conn_interval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1params_1t_1slave_1latency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_conn_params_t *arg1 = (ble_gap_conn_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->slave_latency = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1params_1t_1slave_1latency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_conn_params_t *arg1 = (ble_gap_conn_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->slave_latency);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1params_1t_1conn_1sup_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_conn_params_t *arg1 = (ble_gap_conn_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_sup_timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1params_1t_1conn_1sup_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_conn_params_t *arg1 = (ble_gap_conn_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_sup_timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1conn_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_conn_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_conn_params_t *)new ble_gap_conn_params_t();
  *(ble_gap_conn_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1conn_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_conn_params_t *arg1 = (ble_gap_conn_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_conn_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1sec_1mode_1t_1sm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_conn_sec_mode_t *arg1 = (ble_gap_conn_sec_mode_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_sec_mode_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->sm = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1sec_1mode_1t_1sm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_conn_sec_mode_t *arg1 = (ble_gap_conn_sec_mode_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_sec_mode_t **)&jarg1; 
  result = (uint8_t) ((arg1)->sm);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1sec_1mode_1t_1lv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_conn_sec_mode_t *arg1 = (ble_gap_conn_sec_mode_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_sec_mode_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lv = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1sec_1mode_1t_1lv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_conn_sec_mode_t *arg1 = (ble_gap_conn_sec_mode_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_sec_mode_t **)&jarg1; 
  result = (uint8_t) ((arg1)->lv);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1conn_1sec_1mode_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_conn_sec_mode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_conn_sec_mode_t *)new ble_gap_conn_sec_mode_t();
  *(ble_gap_conn_sec_mode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1conn_1sec_1mode_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_conn_sec_mode_t *arg1 = (ble_gap_conn_sec_mode_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_conn_sec_mode_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1sec_1t_1sec_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_conn_sec_t *arg1 = (ble_gap_conn_sec_t *) 0 ;
  ble_gap_conn_sec_mode_t *arg2 = (ble_gap_conn_sec_mode_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_conn_sec_t **)&jarg1; 
  arg2 = *(ble_gap_conn_sec_mode_t **)&jarg2; 
  if (arg1) (arg1)->sec_mode = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1sec_1t_1sec_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_conn_sec_t *arg1 = (ble_gap_conn_sec_t *) 0 ;
  ble_gap_conn_sec_mode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_sec_t **)&jarg1; 
  result = (ble_gap_conn_sec_mode_t *)& ((arg1)->sec_mode);
  *(ble_gap_conn_sec_mode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1sec_1t_1encr_1key_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_conn_sec_t *arg1 = (ble_gap_conn_sec_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_sec_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->encr_key_size = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1sec_1t_1encr_1key_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_conn_sec_t *arg1 = (ble_gap_conn_sec_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_sec_t **)&jarg1; 
  result = (uint8_t) ((arg1)->encr_key_size);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1conn_1sec_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_conn_sec_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_conn_sec_t *)new ble_gap_conn_sec_t();
  *(ble_gap_conn_sec_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1conn_1sec_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_conn_sec_t *arg1 = (ble_gap_conn_sec_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_conn_sec_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1irk_1t_1irk_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_irk_t *arg1 = (ble_gap_irk_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_irk_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->irk;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1irk_1t_1irk_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_irk_t *arg1 = (ble_gap_irk_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_irk_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->irk);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1irk_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_irk_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_irk_t *)new ble_gap_irk_t();
  *(ble_gap_irk_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1irk_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_irk_t *arg1 = (ble_gap_irk_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_irk_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1ch_1mask_1t_1ch_137_1off_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_adv_ch_mask_t *arg1 = (ble_gap_adv_ch_mask_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_ch_mask_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ch_37_off = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1ch_1mask_1t_1ch_137_1off_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_adv_ch_mask_t *arg1 = (ble_gap_adv_ch_mask_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_ch_mask_t **)&jarg1; 
  result = (uint8_t) ((arg1)->ch_37_off);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1ch_1mask_1t_1ch_138_1off_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_adv_ch_mask_t *arg1 = (ble_gap_adv_ch_mask_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_ch_mask_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ch_38_off = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1ch_1mask_1t_1ch_138_1off_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_adv_ch_mask_t *arg1 = (ble_gap_adv_ch_mask_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_ch_mask_t **)&jarg1; 
  result = (uint8_t) ((arg1)->ch_38_off);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1ch_1mask_1t_1ch_139_1off_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_adv_ch_mask_t *arg1 = (ble_gap_adv_ch_mask_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_ch_mask_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ch_39_off = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1ch_1mask_1t_1ch_139_1off_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_adv_ch_mask_t *arg1 = (ble_gap_adv_ch_mask_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_ch_mask_t **)&jarg1; 
  result = (uint8_t) ((arg1)->ch_39_off);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1adv_1ch_1mask_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_adv_ch_mask_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_adv_ch_mask_t *)new ble_gap_adv_ch_mask_t();
  *(ble_gap_adv_ch_mask_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1adv_1ch_1mask_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_adv_ch_mask_t *arg1 = (ble_gap_adv_ch_mask_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_adv_ch_mask_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1p_1peer_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  if (arg1) (arg1)->p_peer_addr = (ble_gap_addr_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1p_1peer_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  ble_gap_addr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  result = (ble_gap_addr_t *) ((arg1)->p_peer_addr);
  *(ble_gap_addr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1fp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->fp = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1fp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->fp);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1interval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->interval = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1interval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->interval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1channel_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  ble_gap_adv_ch_mask_t *arg2 = (ble_gap_adv_ch_mask_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  arg2 = *(ble_gap_adv_ch_mask_t **)&jarg2; 
  if (arg1) (arg1)->channel_mask = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1adv_1params_1t_1channel_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  ble_gap_adv_ch_mask_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  result = (ble_gap_adv_ch_mask_t *)& ((arg1)->channel_mask);
  *(ble_gap_adv_ch_mask_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1adv_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_adv_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_adv_params_t *)new ble_gap_adv_params_t();
  *(ble_gap_adv_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1adv_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_adv_params_t *arg1 = (ble_gap_adv_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_adv_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1active_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->active = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1active_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->active);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1use_1whitelist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->use_whitelist = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1use_1whitelist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->use_whitelist);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1adv_1dir_1report_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->adv_dir_report = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1adv_1dir_1report_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->adv_dir_report);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1interval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->interval = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1interval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->interval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1window_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->window = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1window_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->window);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1scan_1params_1t_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1scan_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_scan_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_scan_params_t *)new ble_gap_scan_params_t();
  *(ble_gap_scan_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1scan_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_scan_params_t *arg1 = (ble_gap_scan_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_scan_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1privacy_1params_1t_1privacy_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_privacy_params_t *arg1 = (ble_gap_privacy_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_privacy_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->privacy_mode = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1privacy_1params_1t_1privacy_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_privacy_params_t *arg1 = (ble_gap_privacy_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_privacy_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->privacy_mode);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1privacy_1params_1t_1private_1addr_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_privacy_params_t *arg1 = (ble_gap_privacy_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_privacy_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->private_addr_type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1privacy_1params_1t_1private_1addr_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_privacy_params_t *arg1 = (ble_gap_privacy_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_privacy_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->private_addr_type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1privacy_1params_1t_1private_1addr_1cycle_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_privacy_params_t *arg1 = (ble_gap_privacy_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_privacy_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->private_addr_cycle_s = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1privacy_1params_1t_1private_1addr_1cycle_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_privacy_params_t *arg1 = (ble_gap_privacy_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_privacy_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->private_addr_cycle_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1privacy_1params_1t_1p_1device_1irk_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_privacy_params_t *arg1 = (ble_gap_privacy_params_t *) 0 ;
  ble_gap_irk_t *arg2 = (ble_gap_irk_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_privacy_params_t **)&jarg1; 
  arg2 = *(ble_gap_irk_t **)&jarg2; 
  if (arg1) (arg1)->p_device_irk = arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1privacy_1params_1t_1p_1device_1irk_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_privacy_params_t *arg1 = (ble_gap_privacy_params_t *) 0 ;
  ble_gap_irk_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_privacy_params_t **)&jarg1; 
  result = (ble_gap_irk_t *) ((arg1)->p_device_irk);
  *(ble_gap_irk_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1privacy_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_privacy_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_privacy_params_t *)new ble_gap_privacy_params_t();
  *(ble_gap_privacy_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1privacy_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_privacy_params_t *arg1 = (ble_gap_privacy_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_privacy_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1phys_1t_1tx_1phys_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_phys_t *arg1 = (ble_gap_phys_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_phys_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->tx_phys = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1phys_1t_1tx_1phys_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_phys_t *arg1 = (ble_gap_phys_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_phys_t **)&jarg1; 
  result = (uint8_t) ((arg1)->tx_phys);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1phys_1t_1rx_1phys_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_phys_t *arg1 = (ble_gap_phys_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_phys_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->rx_phys = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1phys_1t_1rx_1phys_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_phys_t *arg1 = (ble_gap_phys_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_phys_t **)&jarg1; 
  result = (uint8_t) ((arg1)->rx_phys);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1phys_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_phys_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_phys_t *)new ble_gap_phys_t();
  *(ble_gap_phys_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1phys_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_phys_t *arg1 = (ble_gap_phys_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_phys_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1kdist_1t_1enc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_kdist_t *arg1 = (ble_gap_sec_kdist_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_kdist_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->enc = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1kdist_1t_1enc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_kdist_t *arg1 = (ble_gap_sec_kdist_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_kdist_t **)&jarg1; 
  result = (uint8_t) ((arg1)->enc);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1kdist_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_kdist_t *arg1 = (ble_gap_sec_kdist_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_kdist_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1kdist_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_kdist_t *arg1 = (ble_gap_sec_kdist_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_kdist_t **)&jarg1; 
  result = (uint8_t) ((arg1)->id);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1kdist_1t_1sign_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_kdist_t *arg1 = (ble_gap_sec_kdist_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_kdist_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->sign = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1kdist_1t_1sign_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_kdist_t *arg1 = (ble_gap_sec_kdist_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_kdist_t **)&jarg1; 
  result = (uint8_t) ((arg1)->sign);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1kdist_1t_1link_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_kdist_t *arg1 = (ble_gap_sec_kdist_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_kdist_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->link = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1kdist_1t_1link_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_kdist_t *arg1 = (ble_gap_sec_kdist_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_kdist_t **)&jarg1; 
  result = (uint8_t) ((arg1)->link);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1sec_1kdist_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_sec_kdist_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_sec_kdist_t *)new ble_gap_sec_kdist_t();
  *(ble_gap_sec_kdist_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1sec_1kdist_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_sec_kdist_t *arg1 = (ble_gap_sec_kdist_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_sec_kdist_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1bond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bond = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1bond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->bond);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1mitm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->mitm = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1mitm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->mitm);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1lesc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lesc = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1lesc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->lesc);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1keypress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->keypress = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1keypress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->keypress);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1io_1caps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->io_caps = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1io_1caps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->io_caps);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1oob_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->oob = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1oob_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->oob);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1min_1key_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->min_key_size = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1min_1key_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->min_key_size);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1max_1key_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->max_key_size = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1max_1key_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->max_key_size);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1kdist_1own_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  ble_gap_sec_kdist_t *arg2 = (ble_gap_sec_kdist_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = *(ble_gap_sec_kdist_t **)&jarg2; 
  if (arg1) (arg1)->kdist_own = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1kdist_1own_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  ble_gap_sec_kdist_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (ble_gap_sec_kdist_t *)& ((arg1)->kdist_own);
  *(ble_gap_sec_kdist_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1kdist_1peer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  ble_gap_sec_kdist_t *arg2 = (ble_gap_sec_kdist_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  arg2 = *(ble_gap_sec_kdist_t **)&jarg2; 
  if (arg1) (arg1)->kdist_peer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1params_1t_1kdist_1peer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  ble_gap_sec_kdist_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  result = (ble_gap_sec_kdist_t *)& ((arg1)->kdist_peer);
  *(ble_gap_sec_kdist_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1sec_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_sec_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_sec_params_t *)new ble_gap_sec_params_t();
  *(ble_gap_sec_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1sec_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_sec_params_t *arg1 = (ble_gap_sec_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_sec_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1info_1t_1ltk_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_enc_info_t *arg1 = (ble_gap_enc_info_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_info_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->ltk;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1info_1t_1ltk_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_enc_info_t *arg1 = (ble_gap_enc_info_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_info_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->ltk);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1info_1t_1lesc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_enc_info_t *arg1 = (ble_gap_enc_info_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_info_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lesc = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1info_1t_1lesc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_enc_info_t *arg1 = (ble_gap_enc_info_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_info_t **)&jarg1; 
  result = (uint8_t) ((arg1)->lesc);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1info_1t_1auth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_enc_info_t *arg1 = (ble_gap_enc_info_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_info_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->auth = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1info_1t_1auth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_enc_info_t *arg1 = (ble_gap_enc_info_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_info_t **)&jarg1; 
  result = (uint8_t) ((arg1)->auth);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1info_1t_1ltk_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_enc_info_t *arg1 = (ble_gap_enc_info_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_info_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ltk_len = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1info_1t_1ltk_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_enc_info_t *arg1 = (ble_gap_enc_info_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_info_t **)&jarg1; 
  result = (uint8_t) ((arg1)->ltk_len);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1enc_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_enc_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_enc_info_t *)new ble_gap_enc_info_t();
  *(ble_gap_enc_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1enc_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_enc_info_t *arg1 = (ble_gap_enc_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_enc_info_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1master_1id_1t_1ediv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_master_id_t *arg1 = (ble_gap_master_id_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_master_id_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->ediv = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1master_1id_1t_1ediv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_master_id_t *arg1 = (ble_gap_master_id_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_master_id_t **)&jarg1; 
  result = (uint16_t) ((arg1)->ediv);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1master_1id_1t_1rand_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_master_id_t *arg1 = (ble_gap_master_id_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_master_id_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->rand;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1master_1id_1t_1rand_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_master_id_t *arg1 = (ble_gap_master_id_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_master_id_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->rand);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1master_1id_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_master_id_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_master_id_t *)new ble_gap_master_id_t();
  *(ble_gap_master_id_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1master_1id_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_master_id_t *arg1 = (ble_gap_master_id_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_master_id_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sign_1info_1t_1csrk_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_sign_info_t *arg1 = (ble_gap_sign_info_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sign_info_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->csrk;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sign_1info_1t_1csrk_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_sign_info_t *arg1 = (ble_gap_sign_info_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sign_info_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->csrk);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1sign_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_sign_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_sign_info_t *)new ble_gap_sign_info_t();
  *(ble_gap_sign_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1sign_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_sign_info_t *arg1 = (ble_gap_sign_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_sign_info_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1p256_1pk_1t_1pk_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_lesc_p256_pk_t *arg1 = (ble_gap_lesc_p256_pk_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_lesc_p256_pk_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->pk;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1p256_1pk_1t_1pk_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_lesc_p256_pk_t *arg1 = (ble_gap_lesc_p256_pk_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_lesc_p256_pk_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->pk);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1lesc_1p256_1pk_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_lesc_p256_pk_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_lesc_p256_pk_t *)new ble_gap_lesc_p256_pk_t();
  *(ble_gap_lesc_p256_pk_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1lesc_1p256_1pk_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_lesc_p256_pk_t *arg1 = (ble_gap_lesc_p256_pk_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_lesc_p256_pk_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1dhkey_1t_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_lesc_dhkey_t *arg1 = (ble_gap_lesc_dhkey_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_lesc_dhkey_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->key;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1dhkey_1t_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_lesc_dhkey_t *arg1 = (ble_gap_lesc_dhkey_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_lesc_dhkey_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->key);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1lesc_1dhkey_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_lesc_dhkey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_lesc_dhkey_t *)new ble_gap_lesc_dhkey_t();
  *(ble_gap_lesc_dhkey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1lesc_1dhkey_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_lesc_dhkey_t *arg1 = (ble_gap_lesc_dhkey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_lesc_dhkey_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1oob_1data_1t_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_lesc_oob_data_t *arg1 = (ble_gap_lesc_oob_data_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_lesc_oob_data_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  if (arg1) (arg1)->addr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1oob_1data_1t_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_lesc_oob_data_t *arg1 = (ble_gap_lesc_oob_data_t *) 0 ;
  ble_gap_addr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_lesc_oob_data_t **)&jarg1; 
  result = (ble_gap_addr_t *)& ((arg1)->addr);
  *(ble_gap_addr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1oob_1data_1t_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_lesc_oob_data_t *arg1 = (ble_gap_lesc_oob_data_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_lesc_oob_data_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->r;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1oob_1data_1t_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_lesc_oob_data_t *arg1 = (ble_gap_lesc_oob_data_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_lesc_oob_data_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->r);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1oob_1data_1t_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_lesc_oob_data_t *arg1 = (ble_gap_lesc_oob_data_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_lesc_oob_data_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->c;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1lesc_1oob_1data_1t_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_lesc_oob_data_t *arg1 = (ble_gap_lesc_oob_data_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_lesc_oob_data_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->c);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1lesc_1oob_1data_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_lesc_oob_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_lesc_oob_data_t *)new ble_gap_lesc_oob_data_t();
  *(ble_gap_lesc_oob_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1lesc_1oob_1data_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_lesc_oob_data_t *arg1 = (ble_gap_lesc_oob_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_lesc_oob_data_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1connected_1t_1peer_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_connected_t *arg1 = (ble_gap_evt_connected_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_connected_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  if (arg1) (arg1)->peer_addr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1connected_1t_1peer_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_connected_t *arg1 = (ble_gap_evt_connected_t *) 0 ;
  ble_gap_addr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_connected_t **)&jarg1; 
  result = (ble_gap_addr_t *)& ((arg1)->peer_addr);
  *(ble_gap_addr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1connected_1t_1role_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_connected_t *arg1 = (ble_gap_evt_connected_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_connected_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->role = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1connected_1t_1role_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_connected_t *arg1 = (ble_gap_evt_connected_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_connected_t **)&jarg1; 
  result = (uint8_t) ((arg1)->role);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1connected_1t_1conn_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_connected_t *arg1 = (ble_gap_evt_connected_t *) 0 ;
  ble_gap_conn_params_t *arg2 = (ble_gap_conn_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_connected_t **)&jarg1; 
  arg2 = *(ble_gap_conn_params_t **)&jarg2; 
  if (arg1) (arg1)->conn_params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1connected_1t_1conn_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_connected_t *arg1 = (ble_gap_evt_connected_t *) 0 ;
  ble_gap_conn_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_connected_t **)&jarg1; 
  result = (ble_gap_conn_params_t *)& ((arg1)->conn_params);
  *(ble_gap_conn_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1connected_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_connected_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_connected_t *)new ble_gap_evt_connected_t();
  *(ble_gap_evt_connected_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1connected_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_connected_t *arg1 = (ble_gap_evt_connected_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_connected_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1disconnected_1t_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_disconnected_t *arg1 = (ble_gap_evt_disconnected_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_disconnected_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->reason = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1disconnected_1t_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_disconnected_t *arg1 = (ble_gap_evt_disconnected_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_disconnected_t **)&jarg1; 
  result = (uint8_t) ((arg1)->reason);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1disconnected_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_disconnected_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_disconnected_t *)new ble_gap_evt_disconnected_t();
  *(ble_gap_evt_disconnected_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1disconnected_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_disconnected_t *arg1 = (ble_gap_evt_disconnected_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_disconnected_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1conn_1param_1update_1t_1conn_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_conn_param_update_t *arg1 = (ble_gap_evt_conn_param_update_t *) 0 ;
  ble_gap_conn_params_t *arg2 = (ble_gap_conn_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_conn_param_update_t **)&jarg1; 
  arg2 = *(ble_gap_conn_params_t **)&jarg2; 
  if (arg1) (arg1)->conn_params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1conn_1param_1update_1t_1conn_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_conn_param_update_t *arg1 = (ble_gap_evt_conn_param_update_t *) 0 ;
  ble_gap_conn_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_conn_param_update_t **)&jarg1; 
  result = (ble_gap_conn_params_t *)& ((arg1)->conn_params);
  *(ble_gap_conn_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1conn_1param_1update_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_conn_param_update_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_conn_param_update_t *)new ble_gap_evt_conn_param_update_t();
  *(ble_gap_evt_conn_param_update_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1conn_1param_1update_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_conn_param_update_t *arg1 = (ble_gap_evt_conn_param_update_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_conn_param_update_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1phy_1update_1request_1t_1peer_1preferred_1phys_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_phy_update_request_t *arg1 = (ble_gap_evt_phy_update_request_t *) 0 ;
  ble_gap_phys_t *arg2 = (ble_gap_phys_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_phy_update_request_t **)&jarg1; 
  arg2 = *(ble_gap_phys_t **)&jarg2; 
  if (arg1) (arg1)->peer_preferred_phys = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1phy_1update_1request_1t_1peer_1preferred_1phys_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_phy_update_request_t *arg1 = (ble_gap_evt_phy_update_request_t *) 0 ;
  ble_gap_phys_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_phy_update_request_t **)&jarg1; 
  result = (ble_gap_phys_t *)& ((arg1)->peer_preferred_phys);
  *(ble_gap_phys_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1phy_1update_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_phy_update_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_phy_update_request_t *)new ble_gap_evt_phy_update_request_t();
  *(ble_gap_evt_phy_update_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1phy_1update_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_phy_update_request_t *arg1 = (ble_gap_evt_phy_update_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_phy_update_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1phy_1update_1t_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_phy_update_t *arg1 = (ble_gap_evt_phy_update_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_phy_update_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1phy_1update_1t_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_phy_update_t *arg1 = (ble_gap_evt_phy_update_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_phy_update_t **)&jarg1; 
  result = (uint8_t) ((arg1)->status);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1phy_1update_1t_1tx_1phy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_phy_update_t *arg1 = (ble_gap_evt_phy_update_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_phy_update_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->tx_phy = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1phy_1update_1t_1tx_1phy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_phy_update_t *arg1 = (ble_gap_evt_phy_update_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_phy_update_t **)&jarg1; 
  result = (uint8_t) ((arg1)->tx_phy);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1phy_1update_1t_1rx_1phy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_phy_update_t *arg1 = (ble_gap_evt_phy_update_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_phy_update_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->rx_phy = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1phy_1update_1t_1rx_1phy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_phy_update_t *arg1 = (ble_gap_evt_phy_update_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_phy_update_t **)&jarg1; 
  result = (uint8_t) ((arg1)->rx_phy);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1phy_1update_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_phy_update_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_phy_update_t *)new ble_gap_evt_phy_update_t();
  *(ble_gap_evt_phy_update_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1phy_1update_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_phy_update_t *arg1 = (ble_gap_evt_phy_update_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_phy_update_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1params_1request_1t_1peer_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_sec_params_request_t *arg1 = (ble_gap_evt_sec_params_request_t *) 0 ;
  ble_gap_sec_params_t *arg2 = (ble_gap_sec_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_sec_params_request_t **)&jarg1; 
  arg2 = *(ble_gap_sec_params_t **)&jarg2; 
  if (arg1) (arg1)->peer_params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1params_1request_1t_1peer_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_sec_params_request_t *arg1 = (ble_gap_evt_sec_params_request_t *) 0 ;
  ble_gap_sec_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_params_request_t **)&jarg1; 
  result = (ble_gap_sec_params_t *)& ((arg1)->peer_params);
  *(ble_gap_sec_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1sec_1params_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_sec_params_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_sec_params_request_t *)new ble_gap_evt_sec_params_request_t();
  *(ble_gap_evt_sec_params_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1sec_1params_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_sec_params_request_t *arg1 = (ble_gap_evt_sec_params_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_sec_params_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1peer_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  if (arg1) (arg1)->peer_addr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1peer_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  ble_gap_addr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  result = (ble_gap_addr_t *)& ((arg1)->peer_addr);
  *(ble_gap_addr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1master_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  ble_gap_master_id_t *arg2 = (ble_gap_master_id_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  arg2 = *(ble_gap_master_id_t **)&jarg2; 
  if (arg1) (arg1)->master_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1master_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  ble_gap_master_id_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  result = (ble_gap_master_id_t *)& ((arg1)->master_id);
  *(ble_gap_master_id_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1enc_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->enc_info = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1enc_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->enc_info);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1id_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->id_info = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1id_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->id_info);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1sign_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->sign_info = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1info_1request_1t_1sign_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->sign_info);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1sec_1info_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_sec_info_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_sec_info_request_t *)new ble_gap_evt_sec_info_request_t();
  *(ble_gap_evt_sec_info_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1sec_1info_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_sec_info_request_t *arg1 = (ble_gap_evt_sec_info_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_sec_info_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1passkey_1display_1t_1passkey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_evt_passkey_display_t *arg1 = (ble_gap_evt_passkey_display_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_passkey_display_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->passkey;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1passkey_1display_1t_1passkey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_passkey_display_t *arg1 = (ble_gap_evt_passkey_display_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_passkey_display_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->passkey);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1passkey_1display_1t_1match_1request_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_passkey_display_t *arg1 = (ble_gap_evt_passkey_display_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_passkey_display_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->match_request = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1passkey_1display_1t_1match_1request_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_passkey_display_t *arg1 = (ble_gap_evt_passkey_display_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_passkey_display_t **)&jarg1; 
  result = (uint8_t) ((arg1)->match_request);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1passkey_1display_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_passkey_display_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_passkey_display_t *)new ble_gap_evt_passkey_display_t();
  *(ble_gap_evt_passkey_display_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1passkey_1display_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_passkey_display_t *arg1 = (ble_gap_evt_passkey_display_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_passkey_display_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1key_1pressed_1t_1kp_1not_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_key_pressed_t *arg1 = (ble_gap_evt_key_pressed_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_key_pressed_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->kp_not = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1key_1pressed_1t_1kp_1not_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_key_pressed_t *arg1 = (ble_gap_evt_key_pressed_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_key_pressed_t **)&jarg1; 
  result = (uint8_t) ((arg1)->kp_not);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1key_1pressed_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_key_pressed_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_key_pressed_t *)new ble_gap_evt_key_pressed_t();
  *(ble_gap_evt_key_pressed_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1key_1pressed_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_key_pressed_t *arg1 = (ble_gap_evt_key_pressed_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_key_pressed_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1key_1request_1t_1key_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_auth_key_request_t *arg1 = (ble_gap_evt_auth_key_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_key_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->key_type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1key_1request_1t_1key_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_auth_key_request_t *arg1 = (ble_gap_evt_auth_key_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_key_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->key_type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1auth_1key_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_auth_key_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_auth_key_request_t *)new ble_gap_evt_auth_key_request_t();
  *(ble_gap_evt_auth_key_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1auth_1key_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_auth_key_request_t *arg1 = (ble_gap_evt_auth_key_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_auth_key_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1lesc_1dhkey_1request_1t_1p_1pk_1peer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_lesc_dhkey_request_t *arg1 = (ble_gap_evt_lesc_dhkey_request_t *) 0 ;
  ble_gap_lesc_p256_pk_t *arg2 = (ble_gap_lesc_p256_pk_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_lesc_dhkey_request_t **)&jarg1; 
  arg2 = *(ble_gap_lesc_p256_pk_t **)&jarg2; 
  if (arg1) (arg1)->p_pk_peer = arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1lesc_1dhkey_1request_1t_1p_1pk_1peer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_lesc_dhkey_request_t *arg1 = (ble_gap_evt_lesc_dhkey_request_t *) 0 ;
  ble_gap_lesc_p256_pk_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_lesc_dhkey_request_t **)&jarg1; 
  result = (ble_gap_lesc_p256_pk_t *) ((arg1)->p_pk_peer);
  *(ble_gap_lesc_p256_pk_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1lesc_1dhkey_1request_1t_1oobd_1req_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_lesc_dhkey_request_t *arg1 = (ble_gap_evt_lesc_dhkey_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_lesc_dhkey_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->oobd_req = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1lesc_1dhkey_1request_1t_1oobd_1req_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_lesc_dhkey_request_t *arg1 = (ble_gap_evt_lesc_dhkey_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_lesc_dhkey_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->oobd_req);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1lesc_1dhkey_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_lesc_dhkey_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_lesc_dhkey_request_t *)new ble_gap_evt_lesc_dhkey_request_t();
  *(ble_gap_evt_lesc_dhkey_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1lesc_1dhkey_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_lesc_dhkey_request_t *arg1 = (ble_gap_evt_lesc_dhkey_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_lesc_dhkey_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1levels_1t_1lv1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_levels_t *arg1 = (ble_gap_sec_levels_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_levels_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lv1 = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1levels_1t_1lv1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_levels_t *arg1 = (ble_gap_sec_levels_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_levels_t **)&jarg1; 
  result = (uint8_t) ((arg1)->lv1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1levels_1t_1lv2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_levels_t *arg1 = (ble_gap_sec_levels_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_levels_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lv2 = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1levels_1t_1lv2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_levels_t *arg1 = (ble_gap_sec_levels_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_levels_t **)&jarg1; 
  result = (uint8_t) ((arg1)->lv2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1levels_1t_1lv3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_levels_t *arg1 = (ble_gap_sec_levels_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_levels_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lv3 = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1levels_1t_1lv3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_levels_t *arg1 = (ble_gap_sec_levels_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_levels_t **)&jarg1; 
  result = (uint8_t) ((arg1)->lv3);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1levels_1t_1lv4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_sec_levels_t *arg1 = (ble_gap_sec_levels_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_levels_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lv4 = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1levels_1t_1lv4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_sec_levels_t *arg1 = (ble_gap_sec_levels_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_levels_t **)&jarg1; 
  result = (uint8_t) ((arg1)->lv4);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1sec_1levels_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_sec_levels_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_sec_levels_t *)new ble_gap_sec_levels_t();
  *(ble_gap_sec_levels_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1sec_1levels_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_sec_levels_t *arg1 = (ble_gap_sec_levels_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_sec_levels_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1key_1t_1enc_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_enc_key_t *arg1 = (ble_gap_enc_key_t *) 0 ;
  ble_gap_enc_info_t *arg2 = (ble_gap_enc_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_enc_key_t **)&jarg1; 
  arg2 = *(ble_gap_enc_info_t **)&jarg2; 
  if (arg1) (arg1)->enc_info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1key_1t_1enc_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_enc_key_t *arg1 = (ble_gap_enc_key_t *) 0 ;
  ble_gap_enc_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_key_t **)&jarg1; 
  result = (ble_gap_enc_info_t *)& ((arg1)->enc_info);
  *(ble_gap_enc_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1key_1t_1master_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_enc_key_t *arg1 = (ble_gap_enc_key_t *) 0 ;
  ble_gap_master_id_t *arg2 = (ble_gap_master_id_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_enc_key_t **)&jarg1; 
  arg2 = *(ble_gap_master_id_t **)&jarg2; 
  if (arg1) (arg1)->master_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1enc_1key_1t_1master_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_enc_key_t *arg1 = (ble_gap_enc_key_t *) 0 ;
  ble_gap_master_id_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_enc_key_t **)&jarg1; 
  result = (ble_gap_master_id_t *)& ((arg1)->master_id);
  *(ble_gap_master_id_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1enc_1key_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_enc_key_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_enc_key_t *)new ble_gap_enc_key_t();
  *(ble_gap_enc_key_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1enc_1key_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_enc_key_t *arg1 = (ble_gap_enc_key_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_enc_key_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1id_1key_1t_1id_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_id_key_t *arg1 = (ble_gap_id_key_t *) 0 ;
  ble_gap_irk_t *arg2 = (ble_gap_irk_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_id_key_t **)&jarg1; 
  arg2 = *(ble_gap_irk_t **)&jarg2; 
  if (arg1) (arg1)->id_info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1id_1key_1t_1id_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_id_key_t *arg1 = (ble_gap_id_key_t *) 0 ;
  ble_gap_irk_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_id_key_t **)&jarg1; 
  result = (ble_gap_irk_t *)& ((arg1)->id_info);
  *(ble_gap_irk_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1id_1key_1t_1id_1addr_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_id_key_t *arg1 = (ble_gap_id_key_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_id_key_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  if (arg1) (arg1)->id_addr_info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1id_1key_1t_1id_1addr_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_id_key_t *arg1 = (ble_gap_id_key_t *) 0 ;
  ble_gap_addr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_id_key_t **)&jarg1; 
  result = (ble_gap_addr_t *)& ((arg1)->id_addr_info);
  *(ble_gap_addr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1id_1key_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_id_key_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_id_key_t *)new ble_gap_id_key_t();
  *(ble_gap_id_key_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1id_1key_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_id_key_t *arg1 = (ble_gap_id_key_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_id_key_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keys_1t_1p_1enc_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_sec_keys_t *arg1 = (ble_gap_sec_keys_t *) 0 ;
  ble_gap_enc_key_t *arg2 = (ble_gap_enc_key_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_sec_keys_t **)&jarg1; 
  arg2 = *(ble_gap_enc_key_t **)&jarg2; 
  if (arg1) (arg1)->p_enc_key = arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keys_1t_1p_1enc_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_sec_keys_t *arg1 = (ble_gap_sec_keys_t *) 0 ;
  ble_gap_enc_key_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_keys_t **)&jarg1; 
  result = (ble_gap_enc_key_t *) ((arg1)->p_enc_key);
  *(ble_gap_enc_key_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keys_1t_1p_1id_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_sec_keys_t *arg1 = (ble_gap_sec_keys_t *) 0 ;
  ble_gap_id_key_t *arg2 = (ble_gap_id_key_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_sec_keys_t **)&jarg1; 
  arg2 = *(ble_gap_id_key_t **)&jarg2; 
  if (arg1) (arg1)->p_id_key = arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keys_1t_1p_1id_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_sec_keys_t *arg1 = (ble_gap_sec_keys_t *) 0 ;
  ble_gap_id_key_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_keys_t **)&jarg1; 
  result = (ble_gap_id_key_t *) ((arg1)->p_id_key);
  *(ble_gap_id_key_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keys_1t_1p_1sign_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_sec_keys_t *arg1 = (ble_gap_sec_keys_t *) 0 ;
  ble_gap_sign_info_t *arg2 = (ble_gap_sign_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_sec_keys_t **)&jarg1; 
  arg2 = *(ble_gap_sign_info_t **)&jarg2; 
  if (arg1) (arg1)->p_sign_key = arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keys_1t_1p_1sign_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_sec_keys_t *arg1 = (ble_gap_sec_keys_t *) 0 ;
  ble_gap_sign_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_keys_t **)&jarg1; 
  result = (ble_gap_sign_info_t *) ((arg1)->p_sign_key);
  *(ble_gap_sign_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keys_1t_1p_1pk_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_sec_keys_t *arg1 = (ble_gap_sec_keys_t *) 0 ;
  ble_gap_lesc_p256_pk_t *arg2 = (ble_gap_lesc_p256_pk_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_sec_keys_t **)&jarg1; 
  arg2 = *(ble_gap_lesc_p256_pk_t **)&jarg2; 
  if (arg1) (arg1)->p_pk = arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keys_1t_1p_1pk_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_sec_keys_t *arg1 = (ble_gap_sec_keys_t *) 0 ;
  ble_gap_lesc_p256_pk_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_keys_t **)&jarg1; 
  result = (ble_gap_lesc_p256_pk_t *) ((arg1)->p_pk);
  *(ble_gap_lesc_p256_pk_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1sec_1keys_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_sec_keys_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_sec_keys_t *)new ble_gap_sec_keys_t();
  *(ble_gap_sec_keys_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1sec_1keys_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_sec_keys_t *arg1 = (ble_gap_sec_keys_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_sec_keys_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keyset_1t_1keys_1own_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_sec_keyset_t *arg1 = (ble_gap_sec_keyset_t *) 0 ;
  ble_gap_sec_keys_t *arg2 = (ble_gap_sec_keys_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_sec_keyset_t **)&jarg1; 
  arg2 = *(ble_gap_sec_keys_t **)&jarg2; 
  if (arg1) (arg1)->keys_own = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keyset_1t_1keys_1own_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_sec_keyset_t *arg1 = (ble_gap_sec_keyset_t *) 0 ;
  ble_gap_sec_keys_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_keyset_t **)&jarg1; 
  result = (ble_gap_sec_keys_t *)& ((arg1)->keys_own);
  *(ble_gap_sec_keys_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keyset_1t_1keys_1peer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_sec_keyset_t *arg1 = (ble_gap_sec_keyset_t *) 0 ;
  ble_gap_sec_keys_t *arg2 = (ble_gap_sec_keys_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_sec_keyset_t **)&jarg1; 
  arg2 = *(ble_gap_sec_keys_t **)&jarg2; 
  if (arg1) (arg1)->keys_peer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1sec_1keyset_1t_1keys_1peer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_sec_keyset_t *arg1 = (ble_gap_sec_keyset_t *) 0 ;
  ble_gap_sec_keys_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_sec_keyset_t **)&jarg1; 
  result = (ble_gap_sec_keys_t *)& ((arg1)->keys_peer);
  *(ble_gap_sec_keys_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1sec_1keyset_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_sec_keyset_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_sec_keyset_t *)new ble_gap_sec_keyset_t();
  *(ble_gap_sec_keyset_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1sec_1keyset_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_sec_keyset_t *arg1 = (ble_gap_sec_keyset_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_sec_keyset_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1params_1t_1max_1tx_1octets_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_data_length_params_t *arg1 = (ble_gap_data_length_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->max_tx_octets = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1params_1t_1max_1tx_1octets_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_data_length_params_t *arg1 = (ble_gap_data_length_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->max_tx_octets);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1params_1t_1max_1rx_1octets_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_data_length_params_t *arg1 = (ble_gap_data_length_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->max_rx_octets = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1params_1t_1max_1rx_1octets_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_data_length_params_t *arg1 = (ble_gap_data_length_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->max_rx_octets);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1params_1t_1max_1tx_1time_1us_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_data_length_params_t *arg1 = (ble_gap_data_length_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->max_tx_time_us = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1params_1t_1max_1tx_1time_1us_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_data_length_params_t *arg1 = (ble_gap_data_length_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->max_tx_time_us);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1params_1t_1max_1rx_1time_1us_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_data_length_params_t *arg1 = (ble_gap_data_length_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->max_rx_time_us = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1params_1t_1max_1rx_1time_1us_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_data_length_params_t *arg1 = (ble_gap_data_length_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->max_rx_time_us);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1data_1length_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_data_length_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_data_length_params_t *)new ble_gap_data_length_params_t();
  *(ble_gap_data_length_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1data_1length_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_data_length_params_t *arg1 = (ble_gap_data_length_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_data_length_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1limitation_1t_1tx_1payload_1limited_1octets_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_data_length_limitation_t *arg1 = (ble_gap_data_length_limitation_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_limitation_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->tx_payload_limited_octets = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1limitation_1t_1tx_1payload_1limited_1octets_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_data_length_limitation_t *arg1 = (ble_gap_data_length_limitation_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_limitation_t **)&jarg1; 
  result = (uint16_t) ((arg1)->tx_payload_limited_octets);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1limitation_1t_1rx_1payload_1limited_1octets_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_data_length_limitation_t *arg1 = (ble_gap_data_length_limitation_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_limitation_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->rx_payload_limited_octets = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1limitation_1t_1rx_1payload_1limited_1octets_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_data_length_limitation_t *arg1 = (ble_gap_data_length_limitation_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_limitation_t **)&jarg1; 
  result = (uint16_t) ((arg1)->rx_payload_limited_octets);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1limitation_1t_1tx_1rx_1time_1limited_1us_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_data_length_limitation_t *arg1 = (ble_gap_data_length_limitation_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_limitation_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->tx_rx_time_limited_us = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1data_1length_1limitation_1t_1tx_1rx_1time_1limited_1us_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_data_length_limitation_t *arg1 = (ble_gap_data_length_limitation_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_data_length_limitation_t **)&jarg1; 
  result = (uint16_t) ((arg1)->tx_rx_time_limited_us);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1data_1length_1limitation_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_data_length_limitation_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_data_length_limitation_t *)new ble_gap_data_length_limitation_t();
  *(ble_gap_data_length_limitation_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1data_1length_1limitation_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_data_length_limitation_t *arg1 = (ble_gap_data_length_limitation_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_data_length_limitation_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1auth_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->auth_status = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1auth_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  result = (uint8_t) ((arg1)->auth_status);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1error_1src_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->error_src = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1error_1src_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  result = (uint8_t) ((arg1)->error_src);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1bonded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bonded = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1bonded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  result = (uint8_t) ((arg1)->bonded);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1lesc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lesc = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1lesc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  result = (uint8_t) ((arg1)->lesc);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1sm1_1levels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  ble_gap_sec_levels_t *arg2 = (ble_gap_sec_levels_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  arg2 = *(ble_gap_sec_levels_t **)&jarg2; 
  if (arg1) (arg1)->sm1_levels = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1sm1_1levels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  ble_gap_sec_levels_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  result = (ble_gap_sec_levels_t *)& ((arg1)->sm1_levels);
  *(ble_gap_sec_levels_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1sm2_1levels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  ble_gap_sec_levels_t *arg2 = (ble_gap_sec_levels_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  arg2 = *(ble_gap_sec_levels_t **)&jarg2; 
  if (arg1) (arg1)->sm2_levels = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1sm2_1levels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  ble_gap_sec_levels_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  result = (ble_gap_sec_levels_t *)& ((arg1)->sm2_levels);
  *(ble_gap_sec_levels_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1kdist_1own_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  ble_gap_sec_kdist_t *arg2 = (ble_gap_sec_kdist_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  arg2 = *(ble_gap_sec_kdist_t **)&jarg2; 
  if (arg1) (arg1)->kdist_own = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1kdist_1own_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  ble_gap_sec_kdist_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  result = (ble_gap_sec_kdist_t *)& ((arg1)->kdist_own);
  *(ble_gap_sec_kdist_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1kdist_1peer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  ble_gap_sec_kdist_t *arg2 = (ble_gap_sec_kdist_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  arg2 = *(ble_gap_sec_kdist_t **)&jarg2; 
  if (arg1) (arg1)->kdist_peer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1auth_1status_1t_1kdist_1peer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  ble_gap_sec_kdist_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  result = (ble_gap_sec_kdist_t *)& ((arg1)->kdist_peer);
  *(ble_gap_sec_kdist_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1auth_1status_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_auth_status_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_auth_status_t *)new ble_gap_evt_auth_status_t();
  *(ble_gap_evt_auth_status_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1auth_1status_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_auth_status_t *arg1 = (ble_gap_evt_auth_status_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_auth_status_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1conn_1sec_1update_1t_1conn_1sec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_conn_sec_update_t *arg1 = (ble_gap_evt_conn_sec_update_t *) 0 ;
  ble_gap_conn_sec_t *arg2 = (ble_gap_conn_sec_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_conn_sec_update_t **)&jarg1; 
  arg2 = *(ble_gap_conn_sec_t **)&jarg2; 
  if (arg1) (arg1)->conn_sec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1conn_1sec_1update_1t_1conn_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_conn_sec_update_t *arg1 = (ble_gap_evt_conn_sec_update_t *) 0 ;
  ble_gap_conn_sec_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_conn_sec_update_t **)&jarg1; 
  result = (ble_gap_conn_sec_t *)& ((arg1)->conn_sec);
  *(ble_gap_conn_sec_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1conn_1sec_1update_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_conn_sec_update_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_conn_sec_update_t *)new ble_gap_evt_conn_sec_update_t();
  *(ble_gap_evt_conn_sec_update_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1conn_1sec_1update_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_conn_sec_update_t *arg1 = (ble_gap_evt_conn_sec_update_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_conn_sec_update_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1timeout_1t_1src_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_timeout_t *arg1 = (ble_gap_evt_timeout_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_timeout_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->src = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1timeout_1t_1src_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_timeout_t *arg1 = (ble_gap_evt_timeout_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_timeout_t **)&jarg1; 
  result = (uint8_t) ((arg1)->src);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1timeout_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_timeout_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_timeout_t *)new ble_gap_evt_timeout_t();
  *(ble_gap_evt_timeout_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1timeout_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_timeout_t *arg1 = (ble_gap_evt_timeout_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_timeout_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1rssi_1changed_1t_1rssi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  ble_gap_evt_rssi_changed_t *arg1 = (ble_gap_evt_rssi_changed_t *) 0 ;
  int8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_rssi_changed_t **)&jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->rssi = arg2;
}


SWIGEXPORT jbyte JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1rssi_1changed_1t_1rssi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  ble_gap_evt_rssi_changed_t *arg1 = (ble_gap_evt_rssi_changed_t *) 0 ;
  int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_rssi_changed_t **)&jarg1; 
  result = (int8_t) ((arg1)->rssi);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1rssi_1changed_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_rssi_changed_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_rssi_changed_t *)new ble_gap_evt_rssi_changed_t();
  *(ble_gap_evt_rssi_changed_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1rssi_1changed_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_rssi_changed_t *arg1 = (ble_gap_evt_rssi_changed_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_rssi_changed_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1peer_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  if (arg1) (arg1)->peer_addr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1peer_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  ble_gap_addr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  result = (ble_gap_addr_t *)& ((arg1)->peer_addr);
  *(ble_gap_addr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1direct_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  if (arg1) (arg1)->direct_addr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1direct_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  ble_gap_addr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  result = (ble_gap_addr_t *)& ((arg1)->direct_addr);
  *(ble_gap_addr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1rssi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  int8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->rssi = arg2;
}


SWIGEXPORT jbyte JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1rssi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  result = (int8_t) ((arg1)->rssi);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1scan_1rsp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->scan_rsp = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1scan_1rsp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  result = (uint8_t) ((arg1)->scan_rsp);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1dlen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->dlen = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1dlen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  result = (uint8_t) ((arg1)->dlen);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->data;
    for (ii = 0; ii < (size_t)(31); ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1adv_1report_1t_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1adv_1report_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_adv_report_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_adv_report_t *)new ble_gap_evt_adv_report_t();
  *(ble_gap_evt_adv_report_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1adv_1report_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_adv_report_t *arg1 = (ble_gap_evt_adv_report_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_adv_report_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1request_1t_1bond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_sec_request_t *arg1 = (ble_gap_evt_sec_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bond = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1request_1t_1bond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_sec_request_t *arg1 = (ble_gap_evt_sec_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->bond);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1request_1t_1mitm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_sec_request_t *arg1 = (ble_gap_evt_sec_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->mitm = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1request_1t_1mitm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_sec_request_t *arg1 = (ble_gap_evt_sec_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->mitm);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1request_1t_1lesc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_sec_request_t *arg1 = (ble_gap_evt_sec_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lesc = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1request_1t_1lesc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_sec_request_t *arg1 = (ble_gap_evt_sec_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->lesc);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1request_1t_1keypress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_evt_sec_request_t *arg1 = (ble_gap_evt_sec_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->keypress = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1sec_1request_1t_1keypress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_evt_sec_request_t *arg1 = (ble_gap_evt_sec_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_sec_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->keypress);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1sec_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_sec_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_sec_request_t *)new ble_gap_evt_sec_request_t();
  *(ble_gap_evt_sec_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1sec_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_sec_request_t *arg1 = (ble_gap_evt_sec_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_sec_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1conn_1param_1update_1request_1t_1conn_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_conn_param_update_request_t *arg1 = (ble_gap_evt_conn_param_update_request_t *) 0 ;
  ble_gap_conn_params_t *arg2 = (ble_gap_conn_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_conn_param_update_request_t **)&jarg1; 
  arg2 = *(ble_gap_conn_params_t **)&jarg2; 
  if (arg1) (arg1)->conn_params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1conn_1param_1update_1request_1t_1conn_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_conn_param_update_request_t *arg1 = (ble_gap_evt_conn_param_update_request_t *) 0 ;
  ble_gap_conn_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_conn_param_update_request_t **)&jarg1; 
  result = (ble_gap_conn_params_t *)& ((arg1)->conn_params);
  *(ble_gap_conn_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1conn_1param_1update_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_conn_param_update_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_conn_param_update_request_t *)new ble_gap_evt_conn_param_update_request_t();
  *(ble_gap_evt_conn_param_update_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1conn_1param_1update_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_conn_param_update_request_t *arg1 = (ble_gap_evt_conn_param_update_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_conn_param_update_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1scan_1req_1report_1t_1rssi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  ble_gap_evt_scan_req_report_t *arg1 = (ble_gap_evt_scan_req_report_t *) 0 ;
  int8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_scan_req_report_t **)&jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->rssi = arg2;
}


SWIGEXPORT jbyte JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1scan_1req_1report_1t_1rssi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  ble_gap_evt_scan_req_report_t *arg1 = (ble_gap_evt_scan_req_report_t *) 0 ;
  int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_scan_req_report_t **)&jarg1; 
  result = (int8_t) ((arg1)->rssi);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1scan_1req_1report_1t_1peer_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_scan_req_report_t *arg1 = (ble_gap_evt_scan_req_report_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_scan_req_report_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  if (arg1) (arg1)->peer_addr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1scan_1req_1report_1t_1peer_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_scan_req_report_t *arg1 = (ble_gap_evt_scan_req_report_t *) 0 ;
  ble_gap_addr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_scan_req_report_t **)&jarg1; 
  result = (ble_gap_addr_t *)& ((arg1)->peer_addr);
  *(ble_gap_addr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1scan_1req_1report_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_scan_req_report_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_scan_req_report_t *)new ble_gap_evt_scan_req_report_t();
  *(ble_gap_evt_scan_req_report_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1scan_1req_1report_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_scan_req_report_t *arg1 = (ble_gap_evt_scan_req_report_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_scan_req_report_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1data_1length_1update_1request_1t_1peer_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_data_length_update_request_t *arg1 = (ble_gap_evt_data_length_update_request_t *) 0 ;
  ble_gap_data_length_params_t *arg2 = (ble_gap_data_length_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_data_length_update_request_t **)&jarg1; 
  arg2 = *(ble_gap_data_length_params_t **)&jarg2; 
  if (arg1) (arg1)->peer_params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1data_1length_1update_1request_1t_1peer_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_data_length_update_request_t *arg1 = (ble_gap_evt_data_length_update_request_t *) 0 ;
  ble_gap_data_length_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_data_length_update_request_t **)&jarg1; 
  result = (ble_gap_data_length_params_t *)& ((arg1)->peer_params);
  *(ble_gap_data_length_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1data_1length_1update_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_data_length_update_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_data_length_update_request_t *)new ble_gap_evt_data_length_update_request_t();
  *(ble_gap_evt_data_length_update_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1data_1length_1update_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_data_length_update_request_t *arg1 = (ble_gap_evt_data_length_update_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_data_length_update_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1data_1length_1update_1t_1effective_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_evt_data_length_update_t *arg1 = (ble_gap_evt_data_length_update_t *) 0 ;
  ble_gap_data_length_params_t *arg2 = (ble_gap_data_length_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_evt_data_length_update_t **)&jarg1; 
  arg2 = *(ble_gap_data_length_params_t **)&jarg2; 
  if (arg1) (arg1)->effective_params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1data_1length_1update_1t_1effective_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_evt_data_length_update_t *arg1 = (ble_gap_evt_data_length_update_t *) 0 ;
  ble_gap_data_length_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_data_length_update_t **)&jarg1; 
  result = (ble_gap_data_length_params_t *)& ((arg1)->effective_params);
  *(ble_gap_data_length_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1data_1length_1update_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_data_length_update_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_data_length_update_t *)new ble_gap_evt_data_length_update_t();
  *(ble_gap_evt_data_length_update_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1data_1length_1update_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_data_length_update_t *arg1 = (ble_gap_evt_data_length_update_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_data_length_update_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1t_1conn_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_evt_t *arg1 = (ble_gap_evt_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1evt_1t_1conn_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_evt_t *arg1 = (ble_gap_evt_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_evt_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1evt_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_evt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_evt_t *)new ble_gap_evt_t();
  *(ble_gap_evt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1evt_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_evt_t *arg1 = (ble_gap_evt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_evt_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1cfg_1t_1conn_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_conn_cfg_t *arg1 = (ble_gap_conn_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->conn_count = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1cfg_1t_1conn_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_conn_cfg_t *arg1 = (ble_gap_conn_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->conn_count);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1cfg_1t_1event_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_conn_cfg_t *arg1 = (ble_gap_conn_cfg_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_cfg_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->event_length = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1conn_1cfg_1t_1event_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_conn_cfg_t *arg1 = (ble_gap_conn_cfg_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_conn_cfg_t **)&jarg1; 
  result = (uint16_t) ((arg1)->event_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_conn_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_conn_cfg_t *)new ble_gap_conn_cfg_t();
  *(ble_gap_conn_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_conn_cfg_t *arg1 = (ble_gap_conn_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_conn_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1role_1count_1t_1periph_1role_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_cfg_role_count_t *arg1 = (ble_gap_cfg_role_count_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_role_count_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->periph_role_count = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1role_1count_1t_1periph_1role_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_cfg_role_count_t *arg1 = (ble_gap_cfg_role_count_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_role_count_t **)&jarg1; 
  result = (uint8_t) ((arg1)->periph_role_count);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1role_1count_1t_1central_1role_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_cfg_role_count_t *arg1 = (ble_gap_cfg_role_count_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_role_count_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->central_role_count = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1role_1count_1t_1central_1role_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_cfg_role_count_t *arg1 = (ble_gap_cfg_role_count_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_role_count_t **)&jarg1; 
  result = (uint8_t) ((arg1)->central_role_count);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1role_1count_1t_1central_1sec_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_cfg_role_count_t *arg1 = (ble_gap_cfg_role_count_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_role_count_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->central_sec_count = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1role_1count_1t_1central_1sec_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_cfg_role_count_t *arg1 = (ble_gap_cfg_role_count_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_role_count_t **)&jarg1; 
  result = (uint8_t) ((arg1)->central_sec_count);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1cfg_1role_1count_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_cfg_role_count_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_cfg_role_count_t *)new ble_gap_cfg_role_count_t();
  *(ble_gap_cfg_role_count_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1cfg_1role_1count_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_cfg_role_count_t *arg1 = (ble_gap_cfg_role_count_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_cfg_role_count_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1write_1perm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  ble_gap_conn_sec_mode_t *arg2 = (ble_gap_conn_sec_mode_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  arg2 = *(ble_gap_conn_sec_mode_t **)&jarg2; 
  if (arg1) (arg1)->write_perm = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1write_1perm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  ble_gap_conn_sec_mode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  result = (ble_gap_conn_sec_mode_t *)& ((arg1)->write_perm);
  *(ble_gap_conn_sec_mode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1vloc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vloc = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1vloc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  result = (uint8_t) ((arg1)->vloc);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1current_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->current_len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1current_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  result = (uint16_t) ((arg1)->current_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1max_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->max_len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1device_1name_1t_1max_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  result = (uint16_t) ((arg1)->max_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1cfg_1device_1name_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_cfg_device_name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_cfg_device_name_t *)new ble_gap_cfg_device_name_t();
  *(ble_gap_cfg_device_name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1cfg_1device_1name_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_cfg_device_name_t *arg1 = (ble_gap_cfg_device_name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_cfg_device_name_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1t_1role_1count_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_cfg_t *arg1 = (ble_gap_cfg_t *) 0 ;
  ble_gap_cfg_role_count_t *arg2 = (ble_gap_cfg_role_count_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_cfg_t **)&jarg1; 
  arg2 = *(ble_gap_cfg_role_count_t **)&jarg2; 
  if (arg1) (arg1)->role_count_cfg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1t_1role_1count_1cfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_cfg_t *arg1 = (ble_gap_cfg_t *) 0 ;
  ble_gap_cfg_role_count_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_t **)&jarg1; 
  result = (ble_gap_cfg_role_count_t *)& ((arg1)->role_count_cfg);
  *(ble_gap_cfg_role_count_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1t_1device_1name_1cfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_cfg_t *arg1 = (ble_gap_cfg_t *) 0 ;
  ble_gap_cfg_device_name_t *arg2 = (ble_gap_cfg_device_name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_cfg_t **)&jarg1; 
  arg2 = *(ble_gap_cfg_device_name_t **)&jarg2; 
  if (arg1) (arg1)->device_name_cfg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1cfg_1t_1device_1name_1cfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_cfg_t *arg1 = (ble_gap_cfg_t *) 0 ;
  ble_gap_cfg_device_name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_cfg_t **)&jarg1; 
  result = (ble_gap_cfg_device_name_t *)& ((arg1)->device_name_cfg);
  *(ble_gap_cfg_device_name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_cfg_t *)new ble_gap_cfg_t();
  *(ble_gap_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_cfg_t *arg1 = (ble_gap_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1ch_1map_1t_1conn_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_opt_ch_map_t *arg1 = (ble_gap_opt_ch_map_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_ch_map_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1ch_1map_1t_1conn_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_opt_ch_map_t *arg1 = (ble_gap_opt_ch_map_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_ch_map_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1ch_1map_1t_1ch_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_opt_ch_map_t *arg1 = (ble_gap_opt_ch_map_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_ch_map_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->ch_map;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1ch_1map_1t_1ch_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_opt_ch_map_t *arg1 = (ble_gap_opt_ch_map_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_ch_map_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->ch_map);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1opt_1ch_1map_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_opt_ch_map_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_opt_ch_map_t *)new ble_gap_opt_ch_map_t();
  *(ble_gap_opt_ch_map_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1opt_1ch_1map_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_opt_ch_map_t *arg1 = (ble_gap_opt_ch_map_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_opt_ch_map_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1local_1conn_1latency_1t_1conn_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_opt_local_conn_latency_t *arg1 = (ble_gap_opt_local_conn_latency_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_local_conn_latency_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1local_1conn_1latency_1t_1conn_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_opt_local_conn_latency_t *arg1 = (ble_gap_opt_local_conn_latency_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_local_conn_latency_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1local_1conn_1latency_1t_1requested_1latency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_opt_local_conn_latency_t *arg1 = (ble_gap_opt_local_conn_latency_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_local_conn_latency_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->requested_latency = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1local_1conn_1latency_1t_1requested_1latency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_opt_local_conn_latency_t *arg1 = (ble_gap_opt_local_conn_latency_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_local_conn_latency_t **)&jarg1; 
  result = (uint16_t) ((arg1)->requested_latency);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1local_1conn_1latency_1t_1p_1actual_1latency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gap_opt_local_conn_latency_t *arg1 = (ble_gap_opt_local_conn_latency_t *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_local_conn_latency_t **)&jarg1; 
  arg2 = *(uint16_t **)&jarg2; 
  if (arg1) (arg1)->p_actual_latency = arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1local_1conn_1latency_1t_1p_1actual_1latency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_opt_local_conn_latency_t *arg1 = (ble_gap_opt_local_conn_latency_t *) 0 ;
  uint16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_local_conn_latency_t **)&jarg1; 
  result = (uint16_t *) ((arg1)->p_actual_latency);
  *(uint16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1opt_1local_1conn_1latency_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_opt_local_conn_latency_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_opt_local_conn_latency_t *)new ble_gap_opt_local_conn_latency_t();
  *(ble_gap_opt_local_conn_latency_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1opt_1local_1conn_1latency_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_opt_local_conn_latency_t *arg1 = (ble_gap_opt_local_conn_latency_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_opt_local_conn_latency_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1slave_1latency_1disable_1t_1conn_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_opt_slave_latency_disable_t *arg1 = (ble_gap_opt_slave_latency_disable_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_slave_latency_disable_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1slave_1latency_1disable_1t_1conn_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_opt_slave_latency_disable_t *arg1 = (ble_gap_opt_slave_latency_disable_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_slave_latency_disable_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1slave_1latency_1disable_1t_1disable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_opt_slave_latency_disable_t *arg1 = (ble_gap_opt_slave_latency_disable_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_slave_latency_disable_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->disable = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1slave_1latency_1disable_1t_1disable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_opt_slave_latency_disable_t *arg1 = (ble_gap_opt_slave_latency_disable_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_slave_latency_disable_t **)&jarg1; 
  result = (uint8_t) ((arg1)->disable);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1opt_1slave_1latency_1disable_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_opt_slave_latency_disable_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_opt_slave_latency_disable_t *)new ble_gap_opt_slave_latency_disable_t();
  *(ble_gap_opt_slave_latency_disable_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1opt_1slave_1latency_1disable_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_opt_slave_latency_disable_t *arg1 = (ble_gap_opt_slave_latency_disable_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_opt_slave_latency_disable_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1passkey_1t_1p_1passkey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_gap_opt_passkey_t *arg1 = (ble_gap_opt_passkey_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_passkey_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_passkey = (uint8_t const *)arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1passkey_1t_1p_1passkey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_gap_opt_passkey_t *arg1 = (ble_gap_opt_passkey_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_passkey_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_passkey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1opt_1passkey_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_opt_passkey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_opt_passkey_t *)new ble_gap_opt_passkey_t();
  *(ble_gap_opt_passkey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1opt_1passkey_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_opt_passkey_t *arg1 = (ble_gap_opt_passkey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_opt_passkey_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1scan_1req_1report_1t_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_opt_scan_req_report_t *arg1 = (ble_gap_opt_scan_req_report_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_scan_req_report_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->enable = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1scan_1req_1report_1t_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_opt_scan_req_report_t *arg1 = (ble_gap_opt_scan_req_report_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_scan_req_report_t **)&jarg1; 
  result = (uint8_t) ((arg1)->enable);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1opt_1scan_1req_1report_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_opt_scan_req_report_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_opt_scan_req_report_t *)new ble_gap_opt_scan_req_report_t();
  *(ble_gap_opt_scan_req_report_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1opt_1scan_1req_1report_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_opt_scan_req_report_t *arg1 = (ble_gap_opt_scan_req_report_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_opt_scan_req_report_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1compat_1mode_11_1t_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gap_opt_compat_mode_1_t *arg1 = (ble_gap_opt_compat_mode_1_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_compat_mode_1_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->enable = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1compat_1mode_11_1t_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gap_opt_compat_mode_1_t *arg1 = (ble_gap_opt_compat_mode_1_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_compat_mode_1_t **)&jarg1; 
  result = (uint8_t) ((arg1)->enable);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1opt_1compat_1mode_11_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_opt_compat_mode_1_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_opt_compat_mode_1_t *)new ble_gap_opt_compat_mode_1_t();
  *(ble_gap_opt_compat_mode_1_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1opt_1compat_1mode_11_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_opt_compat_mode_1_t *arg1 = (ble_gap_opt_compat_mode_1_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_opt_compat_mode_1_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1auth_1payload_1timeout_1t_1conn_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_opt_auth_payload_timeout_t *arg1 = (ble_gap_opt_auth_payload_timeout_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_auth_payload_timeout_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1auth_1payload_1timeout_1t_1conn_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_opt_auth_payload_timeout_t *arg1 = (ble_gap_opt_auth_payload_timeout_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_auth_payload_timeout_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1auth_1payload_1timeout_1t_1auth_1payload_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gap_opt_auth_payload_timeout_t *arg1 = (ble_gap_opt_auth_payload_timeout_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_auth_payload_timeout_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->auth_payload_timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1auth_1payload_1timeout_1t_1auth_1payload_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gap_opt_auth_payload_timeout_t *arg1 = (ble_gap_opt_auth_payload_timeout_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_auth_payload_timeout_t **)&jarg1; 
  result = (uint16_t) ((arg1)->auth_payload_timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1opt_1auth_1payload_1timeout_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_opt_auth_payload_timeout_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_opt_auth_payload_timeout_t *)new ble_gap_opt_auth_payload_timeout_t();
  *(ble_gap_opt_auth_payload_timeout_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1opt_1auth_1payload_1timeout_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_opt_auth_payload_timeout_t *arg1 = (ble_gap_opt_auth_payload_timeout_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_opt_auth_payload_timeout_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1ch_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_ch_map_t *arg2 = (ble_gap_opt_ch_map_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  arg2 = *(ble_gap_opt_ch_map_t **)&jarg2; 
  if (arg1) (arg1)->ch_map = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1ch_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_ch_map_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  result = (ble_gap_opt_ch_map_t *)& ((arg1)->ch_map);
  *(ble_gap_opt_ch_map_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1local_1conn_1latency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_local_conn_latency_t *arg2 = (ble_gap_opt_local_conn_latency_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  arg2 = *(ble_gap_opt_local_conn_latency_t **)&jarg2; 
  if (arg1) (arg1)->local_conn_latency = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1local_1conn_1latency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_local_conn_latency_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  result = (ble_gap_opt_local_conn_latency_t *)& ((arg1)->local_conn_latency);
  *(ble_gap_opt_local_conn_latency_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1passkey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_passkey_t *arg2 = (ble_gap_opt_passkey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  arg2 = *(ble_gap_opt_passkey_t **)&jarg2; 
  if (arg1) (arg1)->passkey = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1passkey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_passkey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  result = (ble_gap_opt_passkey_t *)& ((arg1)->passkey);
  *(ble_gap_opt_passkey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1scan_1req_1report_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_scan_req_report_t *arg2 = (ble_gap_opt_scan_req_report_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  arg2 = *(ble_gap_opt_scan_req_report_t **)&jarg2; 
  if (arg1) (arg1)->scan_req_report = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1scan_1req_1report_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_scan_req_report_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  result = (ble_gap_opt_scan_req_report_t *)& ((arg1)->scan_req_report);
  *(ble_gap_opt_scan_req_report_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1compat_1mode_11_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_compat_mode_1_t *arg2 = (ble_gap_opt_compat_mode_1_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  arg2 = *(ble_gap_opt_compat_mode_1_t **)&jarg2; 
  if (arg1) (arg1)->compat_mode_1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1compat_1mode_11_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_compat_mode_1_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  result = (ble_gap_opt_compat_mode_1_t *)& ((arg1)->compat_mode_1);
  *(ble_gap_opt_compat_mode_1_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1auth_1payload_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_auth_payload_timeout_t *arg2 = (ble_gap_opt_auth_payload_timeout_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  arg2 = *(ble_gap_opt_auth_payload_timeout_t **)&jarg2; 
  if (arg1) (arg1)->auth_payload_timeout = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1auth_1payload_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_auth_payload_timeout_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  result = (ble_gap_opt_auth_payload_timeout_t *)& ((arg1)->auth_payload_timeout);
  *(ble_gap_opt_auth_payload_timeout_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1slave_1latency_1disable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_slave_latency_disable_t *arg2 = (ble_gap_opt_slave_latency_disable_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  arg2 = *(ble_gap_opt_slave_latency_disable_t **)&jarg2; 
  if (arg1) (arg1)->slave_latency_disable = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gap_1opt_1t_1slave_1latency_1disable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  ble_gap_opt_slave_latency_disable_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  result = (ble_gap_opt_slave_latency_disable_t *)& ((arg1)->slave_latency_disable);
  *(ble_gap_opt_slave_latency_disable_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gap_1opt_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gap_opt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gap_opt_t *)new ble_gap_opt_t();
  *(ble_gap_opt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gap_1opt_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gap_opt_t *arg1 = (ble_gap_opt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gap_opt_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  result = (uint32_t)sd_ble_gap_addr_set(arg1,(ble_gap_addr_t const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  result = (uint32_t)sd_ble_gap_addr_get(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1whitelist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_addr_t **arg2 = (ble_gap_addr_t **) 0 ;
  uint8_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t ***)&jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (uint32_t)sd_ble_gap_whitelist_set(arg1,(ble_gap_addr_t const *const *)arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1device_1identities_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_id_key_t **arg2 = (ble_gap_id_key_t **) 0 ;
  ble_gap_irk_t **arg3 = (ble_gap_irk_t **) 0 ;
  uint8_t arg4 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_id_key_t ***)&jarg2; 
  arg3 = *(ble_gap_irk_t ***)&jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = (uint32_t)sd_ble_gap_device_identities_set(arg1,(ble_gap_id_key_t const *const *)arg2,(ble_gap_irk_t const *const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1privacy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_privacy_params_t *arg2 = (ble_gap_privacy_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_privacy_params_t **)&jarg2; 
  result = (uint32_t)sd_ble_gap_privacy_set(arg1,(ble_gap_privacy_params_t const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1privacy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_privacy_params_t *arg2 = (ble_gap_privacy_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_privacy_params_t **)&jarg2; 
  result = (uint32_t)sd_ble_gap_privacy_get(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1adv_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2, jshort jarg3, void * jarg4, jshort jarg5) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint8_t arg5 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t *)jarg4; 
  arg5 = (uint8_t)jarg5; 
  result = (uint32_t)sd_ble_gap_adv_data_set(arg1,(unsigned char const *)arg2,arg3,(unsigned char const *)arg4,arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1adv_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_adv_params_t *arg2 = (ble_gap_adv_params_t *) 0 ;
  uint8_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_adv_params_t **)&jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (uint32_t)sd_ble_gap_adv_start(arg1,(ble_gap_adv_params_t const *)arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1adv_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  result = (uint32_t)sd_ble_gap_adv_stop(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1conn_1param_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_conn_params_t *arg3 = (ble_gap_conn_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_conn_params_t **)&jarg3; 
  result = (uint32_t)sd_ble_gap_conn_param_update(arg1,arg2,(ble_gap_conn_params_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint8_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (uint32_t)sd_ble_gap_disconnect(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1tx_1power_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  int8_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (int8_t)jarg2; 
  result = (uint32_t)sd_ble_gap_tx_power_set(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1appearance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (uint32_t)sd_ble_gap_appearance_set(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1appearance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(uint16_t **)&jarg2; 
  result = (uint32_t)sd_ble_gap_appearance_get(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1ppcp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_conn_params_t *arg2 = (ble_gap_conn_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_conn_params_t **)&jarg2; 
  result = (uint32_t)sd_ble_gap_ppcp_set(arg1,(ble_gap_conn_params_t const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1ppcp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_conn_params_t *arg2 = (ble_gap_conn_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_conn_params_t **)&jarg2; 
  result = (uint32_t)sd_ble_gap_ppcp_get(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1device_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, void * jarg3, jint jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_conn_sec_mode_t *arg2 = (ble_gap_conn_sec_mode_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint16_t arg4 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_conn_sec_mode_t **)&jarg2; 
  arg3 = (uint8_t *)jarg3; 
  arg4 = (uint16_t)jarg4; 
  result = (uint32_t)sd_ble_gap_device_name_set(arg1,(ble_gap_conn_sec_mode_t const *)arg2,(unsigned char const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1device_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = *(uint16_t **)&jarg3; 
  result = (uint32_t)sd_ble_gap_device_name_get(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1authenticate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_sec_params_t *arg3 = (ble_gap_sec_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_sec_params_t **)&jarg3; 
  result = (uint32_t)sd_ble_gap_authenticate(arg1,arg2,(ble_gap_sec_params_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1sec_1params_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint8_t arg3 ;
  ble_gap_sec_params_t *arg4 = (ble_gap_sec_params_t *) 0 ;
  ble_gap_sec_keyset_t *arg5 = (ble_gap_sec_keyset_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = *(ble_gap_sec_params_t **)&jarg4; 
  arg5 = *(ble_gap_sec_keyset_t **)&jarg5; 
  result = (uint32_t)sd_ble_gap_sec_params_reply(arg1,arg2,arg3,(ble_gap_sec_params_t const *)arg4,(ble_gap_sec_keyset_t const *)arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1auth_1key_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3, void * jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint8_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t *)jarg4; 
  result = (uint32_t)sd_ble_gap_auth_key_reply(arg1,arg2,arg3,(unsigned char const *)arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1lesc_1dhkey_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_lesc_dhkey_t *arg3 = (ble_gap_lesc_dhkey_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_lesc_dhkey_t **)&jarg3; 
  result = (uint32_t)sd_ble_gap_lesc_dhkey_reply(arg1,arg2,(ble_gap_lesc_dhkey_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1keypress_1notify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint8_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (uint32_t)sd_ble_gap_keypress_notify(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1lesc_1oob_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_lesc_p256_pk_t *arg3 = (ble_gap_lesc_p256_pk_t *) 0 ;
  ble_gap_lesc_oob_data_t *arg4 = (ble_gap_lesc_oob_data_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_lesc_p256_pk_t **)&jarg3; 
  arg4 = *(ble_gap_lesc_oob_data_t **)&jarg4; 
  result = (uint32_t)sd_ble_gap_lesc_oob_data_get(arg1,arg2,(ble_gap_lesc_p256_pk_t const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1lesc_1oob_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_lesc_oob_data_t *arg3 = (ble_gap_lesc_oob_data_t *) 0 ;
  ble_gap_lesc_oob_data_t *arg4 = (ble_gap_lesc_oob_data_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_lesc_oob_data_t **)&jarg3; 
  arg4 = *(ble_gap_lesc_oob_data_t **)&jarg4; 
  result = (uint32_t)sd_ble_gap_lesc_oob_data_set(arg1,arg2,(ble_gap_lesc_oob_data_t const *)arg3,(ble_gap_lesc_oob_data_t const *)arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1encrypt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_master_id_t *arg3 = (ble_gap_master_id_t *) 0 ;
  ble_gap_enc_info_t *arg4 = (ble_gap_enc_info_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_master_id_t **)&jarg3; 
  arg4 = *(ble_gap_enc_info_t **)&jarg4; 
  result = (uint32_t)sd_ble_gap_encrypt(arg1,arg2,(ble_gap_master_id_t const *)arg3,(ble_gap_enc_info_t const *)arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1sec_1info_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_enc_info_t *arg3 = (ble_gap_enc_info_t *) 0 ;
  ble_gap_irk_t *arg4 = (ble_gap_irk_t *) 0 ;
  ble_gap_sign_info_t *arg5 = (ble_gap_sign_info_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_enc_info_t **)&jarg3; 
  arg4 = *(ble_gap_irk_t **)&jarg4; 
  arg5 = *(ble_gap_sign_info_t **)&jarg5; 
  result = (uint32_t)sd_ble_gap_sec_info_reply(arg1,arg2,(ble_gap_enc_info_t const *)arg3,(ble_gap_irk_t const *)arg4,(ble_gap_sign_info_t const *)arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1conn_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_conn_sec_t *arg3 = (ble_gap_conn_sec_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_conn_sec_t **)&jarg3; 
  result = (uint32_t)sd_ble_gap_conn_sec_get(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1rssi_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = (uint32_t)sd_ble_gap_rssi_start(arg1,arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1rssi_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (uint32_t)sd_ble_gap_rssi_stop(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1rssi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  int8_t *arg3 = (int8_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(int8_t **)&jarg3; 
  result = (uint32_t)sd_ble_gap_rssi_get(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1scan_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_scan_params_t *arg2 = (ble_gap_scan_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_scan_params_t **)&jarg2; 
  result = (uint32_t)sd_ble_gap_scan_start(arg1,(ble_gap_scan_params_t const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1scan_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  result = (uint32_t)sd_ble_gap_scan_stop(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jshort jarg5) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  ble_gap_addr_t *arg2 = (ble_gap_addr_t *) 0 ;
  ble_gap_scan_params_t *arg3 = (ble_gap_scan_params_t *) 0 ;
  ble_gap_conn_params_t *arg4 = (ble_gap_conn_params_t *) 0 ;
  uint8_t arg5 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(ble_gap_addr_t **)&jarg2; 
  arg3 = *(ble_gap_scan_params_t **)&jarg3; 
  arg4 = *(ble_gap_conn_params_t **)&jarg4; 
  arg5 = (uint8_t)jarg5; 
  result = (uint32_t)sd_ble_gap_connect(arg1,(ble_gap_addr_t const *)arg2,(ble_gap_scan_params_t const *)arg3,(ble_gap_conn_params_t const *)arg4,arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1connect_1cancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  result = (uint32_t)sd_ble_gap_connect_cancel(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1phy_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_phys_t *arg3 = (ble_gap_phys_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_phys_t **)&jarg3; 
  result = (uint32_t)sd_ble_gap_phy_update(arg1,arg2,(ble_gap_phys_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gap_1data_1length_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gap_data_length_params_t *arg3 = (ble_gap_data_length_params_t *) 0 ;
  ble_gap_data_length_limitation_t *arg4 = (ble_gap_data_length_limitation_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gap_data_length_params_t **)&jarg3; 
  arg4 = *(ble_gap_data_length_limitation_t **)&jarg4; 
  result = (uint32_t)sd_ble_gap_data_length_update(arg1,arg2,(ble_gap_data_length_params_t const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1conn_1cfg_1t_1att_1mtu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatt_conn_cfg_t *arg1 = (ble_gatt_conn_cfg_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_conn_cfg_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->att_mtu = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1conn_1cfg_1t_1att_1mtu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatt_conn_cfg_t *arg1 = (ble_gatt_conn_cfg_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_conn_cfg_t **)&jarg1; 
  result = (uint16_t) ((arg1)->att_mtu);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatt_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatt_conn_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatt_conn_cfg_t *)new ble_gatt_conn_cfg_t();
  *(ble_gatt_conn_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatt_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatt_conn_cfg_t *arg1 = (ble_gatt_conn_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatt_conn_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1broadcast_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->broadcast = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1broadcast_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  result = (uint8_t) ((arg1)->broadcast);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1read_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->read = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1read_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  result = (uint8_t) ((arg1)->read);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1write_1wo_1resp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->write_wo_resp = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1write_1wo_1resp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  result = (uint8_t) ((arg1)->write_wo_resp);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1write_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->write = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1write_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  result = (uint8_t) ((arg1)->write);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1notify_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->notify = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1notify_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  result = (uint8_t) ((arg1)->notify);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1indicate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->indicate = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1indicate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  result = (uint8_t) ((arg1)->indicate);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1auth_1signed_1wr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->auth_signed_wr = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1props_1t_1auth_1signed_1wr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  result = (uint8_t) ((arg1)->auth_signed_wr);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatt_1char_1props_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatt_char_props_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatt_char_props_t *)new ble_gatt_char_props_t();
  *(ble_gatt_char_props_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatt_1char_1props_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatt_char_props_t *arg1 = (ble_gatt_char_props_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatt_char_props_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1ext_1props_1t_1reliable_1wr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatt_char_ext_props_t *arg1 = (ble_gatt_char_ext_props_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_ext_props_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->reliable_wr = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1ext_1props_1t_1reliable_1wr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatt_char_ext_props_t *arg1 = (ble_gatt_char_ext_props_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_ext_props_t **)&jarg1; 
  result = (uint8_t) ((arg1)->reliable_wr);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1ext_1props_1t_1wr_1aux_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatt_char_ext_props_t *arg1 = (ble_gatt_char_ext_props_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_ext_props_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->wr_aux = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatt_1char_1ext_1props_1t_1wr_1aux_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatt_char_ext_props_t *arg1 = (ble_gatt_char_ext_props_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatt_char_ext_props_t **)&jarg1; 
  result = (uint8_t) ((arg1)->wr_aux);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatt_1char_1ext_1props_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatt_char_ext_props_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatt_char_ext_props_t *)new ble_gatt_char_ext_props_t();
  *(ble_gatt_char_ext_props_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatt_1char_1ext_1props_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatt_char_ext_props_t *arg1 = (ble_gatt_char_ext_props_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatt_char_ext_props_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1conn_1cfg_1t_1hvn_1tx_1queue_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_conn_cfg_t *arg1 = (ble_gatts_conn_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_conn_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hvn_tx_queue_size = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1conn_1cfg_1t_1hvn_1tx_1queue_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_conn_cfg_t *arg1 = (ble_gatts_conn_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_conn_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->hvn_tx_queue_size);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_conn_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_conn_cfg_t *)new ble_gatts_conn_cfg_t();
  *(ble_gatts_conn_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_conn_cfg_t *arg1 = (ble_gatts_conn_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_conn_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1read_1perm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  ble_gap_conn_sec_mode_t *arg2 = (ble_gap_conn_sec_mode_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  arg2 = *(ble_gap_conn_sec_mode_t **)&jarg2; 
  if (arg1) (arg1)->read_perm = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1read_1perm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  ble_gap_conn_sec_mode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  result = (ble_gap_conn_sec_mode_t *)& ((arg1)->read_perm);
  *(ble_gap_conn_sec_mode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1write_1perm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  ble_gap_conn_sec_mode_t *arg2 = (ble_gap_conn_sec_mode_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  arg2 = *(ble_gap_conn_sec_mode_t **)&jarg2; 
  if (arg1) (arg1)->write_perm = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1write_1perm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  ble_gap_conn_sec_mode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  result = (ble_gap_conn_sec_mode_t *)& ((arg1)->write_perm);
  *(ble_gap_conn_sec_mode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1vlen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vlen = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1vlen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  result = (uint8_t) ((arg1)->vlen);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1vloc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vloc = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1vloc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  result = (uint8_t) ((arg1)->vloc);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1rd_1auth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->rd_auth = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1rd_1auth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  result = (uint8_t) ((arg1)->rd_auth);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1wr_1auth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->wr_auth = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1md_1t_1wr_1auth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  result = (uint8_t) ((arg1)->wr_auth);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1attr_1md_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_attr_md_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_attr_md_t *)new ble_gatts_attr_md_t();
  *(ble_gatts_attr_md_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1attr_1md_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_attr_md_t *arg1 = (ble_gatts_attr_md_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_attr_md_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1p_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  ble_uuid_t *arg2 = (ble_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  arg2 = *(ble_uuid_t **)&jarg2; 
  if (arg1) (arg1)->p_uuid = (ble_uuid_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1p_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  ble_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  result = (ble_uuid_t *) ((arg1)->p_uuid);
  *(ble_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1p_1attr_1md_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  ble_gatts_attr_md_t *arg2 = (ble_gatts_attr_md_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  arg2 = *(ble_gatts_attr_md_t **)&jarg2; 
  if (arg1) (arg1)->p_attr_md = (ble_gatts_attr_md_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1p_1attr_1md_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  ble_gatts_attr_md_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  result = (ble_gatts_attr_md_t *) ((arg1)->p_attr_md);
  *(ble_gatts_attr_md_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1init_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->init_len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1init_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  result = (uint16_t) ((arg1)->init_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1init_1offs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->init_offs = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1init_1offs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  result = (uint16_t) ((arg1)->init_offs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1max_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->max_len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1max_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  result = (uint16_t) ((arg1)->max_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1attr_1t_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1attr_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_attr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_attr_t *)new ble_gatts_attr_t();
  *(ble_gatts_attr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1attr_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_attr_t *arg1 = (ble_gatts_attr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_attr_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1value_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_value_t *arg1 = (ble_gatts_value_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_value_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1value_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_value_t *arg1 = (ble_gatts_value_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_value_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1value_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_value_t *arg1 = (ble_gatts_value_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_value_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1value_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_value_t *arg1 = (ble_gatts_value_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_value_t **)&jarg1; 
  result = (uint16_t) ((arg1)->offset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1value_1t_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_gatts_value_t *arg1 = (ble_gatts_value_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_value_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1value_1t_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_gatts_value_t *arg1 = (ble_gatts_value_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_value_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1value_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_value_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_value_t *)new ble_gatts_value_t();
  *(ble_gatts_value_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1value_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_value_t *arg1 = (ble_gatts_value_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_value_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1format_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1format_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  result = (uint8_t) ((arg1)->format);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1exponent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  int8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->exponent = arg2;
}


SWIGEXPORT jbyte JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1exponent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  result = (int8_t) ((arg1)->exponent);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1unit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->unit = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1unit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  result = (uint16_t) ((arg1)->unit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1name_1space_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->name_space = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1name_1space_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  result = (uint8_t) ((arg1)->name_space);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1desc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->desc = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1pf_1t_1desc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  result = (uint16_t) ((arg1)->desc);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1char_1pf_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_char_pf_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_char_pf_t *)new ble_gatts_char_pf_t();
  *(ble_gatts_char_pf_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1char_1pf_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_char_pf_t *arg1 = (ble_gatts_char_pf_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_char_pf_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1char_1props_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatt_char_props_t *arg2 = (ble_gatt_char_props_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  arg2 = *(ble_gatt_char_props_t **)&jarg2; 
  if (arg1) (arg1)->char_props = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1char_1props_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatt_char_props_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  result = (ble_gatt_char_props_t *)& ((arg1)->char_props);
  *(ble_gatt_char_props_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1char_1ext_1props_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatt_char_ext_props_t *arg2 = (ble_gatt_char_ext_props_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  arg2 = *(ble_gatt_char_ext_props_t **)&jarg2; 
  if (arg1) (arg1)->char_ext_props = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1char_1ext_1props_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatt_char_ext_props_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  result = (ble_gatt_char_ext_props_t *)& ((arg1)->char_ext_props);
  *(ble_gatt_char_ext_props_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1char_1user_1desc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_char_user_desc = (uint8_t const *)arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1char_1user_1desc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_char_user_desc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1char_1user_1desc_1max_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->char_user_desc_max_size = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1char_1user_1desc_1max_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  result = (uint16_t) ((arg1)->char_user_desc_max_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1char_1user_1desc_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->char_user_desc_size = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1char_1user_1desc_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  result = (uint16_t) ((arg1)->char_user_desc_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1char_1pf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatts_char_pf_t *arg2 = (ble_gatts_char_pf_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  arg2 = *(ble_gatts_char_pf_t **)&jarg2; 
  if (arg1) (arg1)->p_char_pf = (ble_gatts_char_pf_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1char_1pf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatts_char_pf_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  result = (ble_gatts_char_pf_t *) ((arg1)->p_char_pf);
  *(ble_gatts_char_pf_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1user_1desc_1md_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatts_attr_md_t *arg2 = (ble_gatts_attr_md_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  arg2 = *(ble_gatts_attr_md_t **)&jarg2; 
  if (arg1) (arg1)->p_user_desc_md = (ble_gatts_attr_md_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1user_1desc_1md_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatts_attr_md_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  result = (ble_gatts_attr_md_t *) ((arg1)->p_user_desc_md);
  *(ble_gatts_attr_md_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1cccd_1md_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatts_attr_md_t *arg2 = (ble_gatts_attr_md_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  arg2 = *(ble_gatts_attr_md_t **)&jarg2; 
  if (arg1) (arg1)->p_cccd_md = (ble_gatts_attr_md_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1cccd_1md_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatts_attr_md_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  result = (ble_gatts_attr_md_t *) ((arg1)->p_cccd_md);
  *(ble_gatts_attr_md_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1sccd_1md_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatts_attr_md_t *arg2 = (ble_gatts_attr_md_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  arg2 = *(ble_gatts_attr_md_t **)&jarg2; 
  if (arg1) (arg1)->p_sccd_md = (ble_gatts_attr_md_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1md_1t_1p_1sccd_1md_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  ble_gatts_attr_md_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  result = (ble_gatts_attr_md_t *) ((arg1)->p_sccd_md);
  *(ble_gatts_attr_md_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1char_1md_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_char_md_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_char_md_t *)new ble_gatts_char_md_t();
  *(ble_gatts_char_md_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1char_1md_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_char_md_t *arg1 = (ble_gatts_char_md_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_char_md_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1handles_1t_1value_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_char_handles_t *arg1 = (ble_gatts_char_handles_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_handles_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->value_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1handles_1t_1value_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_char_handles_t *arg1 = (ble_gatts_char_handles_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_handles_t **)&jarg1; 
  result = (uint16_t) ((arg1)->value_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1handles_1t_1user_1desc_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_char_handles_t *arg1 = (ble_gatts_char_handles_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_handles_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->user_desc_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1handles_1t_1user_1desc_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_char_handles_t *arg1 = (ble_gatts_char_handles_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_handles_t **)&jarg1; 
  result = (uint16_t) ((arg1)->user_desc_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1handles_1t_1cccd_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_char_handles_t *arg1 = (ble_gatts_char_handles_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_handles_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->cccd_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1handles_1t_1cccd_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_char_handles_t *arg1 = (ble_gatts_char_handles_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_handles_t **)&jarg1; 
  result = (uint16_t) ((arg1)->cccd_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1handles_1t_1sccd_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_char_handles_t *arg1 = (ble_gatts_char_handles_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_handles_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->sccd_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1char_1handles_1t_1sccd_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_char_handles_t *arg1 = (ble_gatts_char_handles_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_char_handles_t **)&jarg1; 
  result = (uint16_t) ((arg1)->sccd_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1char_1handles_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_char_handles_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_char_handles_t *)new ble_gatts_char_handles_t();
  *(ble_gatts_char_handles_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1char_1handles_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_char_handles_t *arg1 = (ble_gatts_char_handles_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_char_handles_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->offset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1p_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  arg2 = *(uint16_t **)&jarg2; 
  if (arg1) (arg1)->p_len = arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1p_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  result = (uint16_t *) ((arg1)->p_len);
  *(uint16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1p_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_data = (uint8_t const *)arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1hvx_1params_1t_1p_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1hvx_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_hvx_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_hvx_params_t *)new ble_gatts_hvx_params_t();
  *(ble_gatts_hvx_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1hvx_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_hvx_params_t *arg1 = (ble_gatts_hvx_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_hvx_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1gatt_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->gatt_status = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1gatt_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->gatt_status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1update_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->update = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1update_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->update);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->offset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1p_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_data = (uint8_t const *)arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1authorize_1params_1t_1p_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1authorize_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_authorize_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_authorize_params_t *)new ble_gatts_authorize_params_t();
  *(ble_gatts_authorize_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1authorize_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_authorize_params_t *arg1 = (ble_gatts_authorize_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_authorize_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1rw_1authorize_1reply_1params_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_rw_authorize_reply_params_t *arg1 = (ble_gatts_rw_authorize_reply_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_rw_authorize_reply_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1rw_1authorize_1reply_1params_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_rw_authorize_reply_params_t *arg1 = (ble_gatts_rw_authorize_reply_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_rw_authorize_reply_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1rw_1authorize_1reply_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_rw_authorize_reply_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_rw_authorize_reply_params_t *)new ble_gatts_rw_authorize_reply_params_t();
  *(ble_gatts_rw_authorize_reply_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1rw_1authorize_1reply_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_rw_authorize_reply_params_t *arg1 = (ble_gatts_rw_authorize_reply_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_rw_authorize_reply_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1cfg_1service_1changed_1t_1service_1changed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_cfg_service_changed_t *arg1 = (ble_gatts_cfg_service_changed_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_cfg_service_changed_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->service_changed = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1cfg_1service_1changed_1t_1service_1changed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_cfg_service_changed_t *arg1 = (ble_gatts_cfg_service_changed_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_cfg_service_changed_t **)&jarg1; 
  result = (uint8_t) ((arg1)->service_changed);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1cfg_1service_1changed_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_cfg_service_changed_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_cfg_service_changed_t *)new ble_gatts_cfg_service_changed_t();
  *(ble_gatts_cfg_service_changed_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1cfg_1service_1changed_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_cfg_service_changed_t *arg1 = (ble_gatts_cfg_service_changed_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_cfg_service_changed_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1cfg_1attr_1tab_1size_1t_1attr_1tab_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gatts_cfg_attr_tab_size_t *arg1 = (ble_gatts_cfg_attr_tab_size_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_cfg_attr_tab_size_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->attr_tab_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1cfg_1attr_1tab_1size_1t_1attr_1tab_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_cfg_attr_tab_size_t *arg1 = (ble_gatts_cfg_attr_tab_size_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_cfg_attr_tab_size_t **)&jarg1; 
  result = (uint32_t) ((arg1)->attr_tab_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1cfg_1attr_1tab_1size_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_cfg_attr_tab_size_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_cfg_attr_tab_size_t *)new ble_gatts_cfg_attr_tab_size_t();
  *(ble_gatts_cfg_attr_tab_size_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1cfg_1attr_1tab_1size_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_cfg_attr_tab_size_t *arg1 = (ble_gatts_cfg_attr_tab_size_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_cfg_attr_tab_size_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1cfg_1t_1service_1changed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_cfg_t *arg1 = (ble_gatts_cfg_t *) 0 ;
  ble_gatts_cfg_service_changed_t *arg2 = (ble_gatts_cfg_service_changed_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_cfg_t **)&jarg1; 
  arg2 = *(ble_gatts_cfg_service_changed_t **)&jarg2; 
  if (arg1) (arg1)->service_changed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1cfg_1t_1service_1changed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_cfg_t *arg1 = (ble_gatts_cfg_t *) 0 ;
  ble_gatts_cfg_service_changed_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_cfg_t **)&jarg1; 
  result = (ble_gatts_cfg_service_changed_t *)& ((arg1)->service_changed);
  *(ble_gatts_cfg_service_changed_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1cfg_1t_1attr_1tab_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_cfg_t *arg1 = (ble_gatts_cfg_t *) 0 ;
  ble_gatts_cfg_attr_tab_size_t *arg2 = (ble_gatts_cfg_attr_tab_size_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_cfg_t **)&jarg1; 
  arg2 = *(ble_gatts_cfg_attr_tab_size_t **)&jarg2; 
  if (arg1) (arg1)->attr_tab_size = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1cfg_1t_1attr_1tab_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_cfg_t *arg1 = (ble_gatts_cfg_t *) 0 ;
  ble_gatts_cfg_attr_tab_size_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_cfg_t **)&jarg1; 
  result = (ble_gatts_cfg_attr_tab_size_t *)& ((arg1)->attr_tab_size);
  *(ble_gatts_cfg_attr_tab_size_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_cfg_t *)new ble_gatts_cfg_t();
  *(ble_gatts_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_cfg_t *arg1 = (ble_gatts_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  ble_uuid_t *arg2 = (ble_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  arg2 = *(ble_uuid_t **)&jarg2; 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  ble_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  result = (ble_uuid_t *)& ((arg1)->uuid);
  *(ble_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1op_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1op_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  result = (uint8_t) ((arg1)->op);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1auth_1required_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->auth_required = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1auth_1required_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  result = (uint8_t) ((arg1)->auth_required);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  result = (uint16_t) ((arg1)->offset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->data;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1write_1t_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1evt_1write_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_evt_write_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_evt_write_t *)new ble_gatts_evt_write_t();
  *(ble_gatts_evt_write_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1evt_1write_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_evt_write_t *arg1 = (ble_gatts_evt_write_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_evt_write_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1read_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_evt_read_t *arg1 = (ble_gatts_evt_read_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_read_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1read_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_evt_read_t *arg1 = (ble_gatts_evt_read_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_read_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1read_1t_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gatts_evt_read_t *arg1 = (ble_gatts_evt_read_t *) 0 ;
  ble_uuid_t *arg2 = (ble_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gatts_evt_read_t **)&jarg1; 
  arg2 = *(ble_uuid_t **)&jarg2; 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1read_1t_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gatts_evt_read_t *arg1 = (ble_gatts_evt_read_t *) 0 ;
  ble_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_read_t **)&jarg1; 
  result = (ble_uuid_t *)& ((arg1)->uuid);
  *(ble_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1read_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_evt_read_t *arg1 = (ble_gatts_evt_read_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_read_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1read_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_evt_read_t *arg1 = (ble_gatts_evt_read_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_read_t **)&jarg1; 
  result = (uint16_t) ((arg1)->offset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1evt_1read_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_evt_read_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_evt_read_t *)new ble_gatts_evt_read_t();
  *(ble_gatts_evt_read_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1evt_1read_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_evt_read_t *arg1 = (ble_gatts_evt_read_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_evt_read_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1rw_1authorize_1request_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_evt_rw_authorize_request_t *arg1 = (ble_gatts_evt_rw_authorize_request_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_rw_authorize_request_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1rw_1authorize_1request_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_evt_rw_authorize_request_t *arg1 = (ble_gatts_evt_rw_authorize_request_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_rw_authorize_request_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1evt_1rw_1authorize_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_evt_rw_authorize_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_evt_rw_authorize_request_t *)new ble_gatts_evt_rw_authorize_request_t();
  *(ble_gatts_evt_rw_authorize_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1evt_1rw_1authorize_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_evt_rw_authorize_request_t *arg1 = (ble_gatts_evt_rw_authorize_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_evt_rw_authorize_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1sys_1attr_1missing_1t_1hint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_evt_sys_attr_missing_t *arg1 = (ble_gatts_evt_sys_attr_missing_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_sys_attr_missing_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hint = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1sys_1attr_1missing_1t_1hint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_evt_sys_attr_missing_t *arg1 = (ble_gatts_evt_sys_attr_missing_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_sys_attr_missing_t **)&jarg1; 
  result = (uint8_t) ((arg1)->hint);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1evt_1sys_1attr_1missing_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_evt_sys_attr_missing_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_evt_sys_attr_missing_t *)new ble_gatts_evt_sys_attr_missing_t();
  *(ble_gatts_evt_sys_attr_missing_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1evt_1sys_1attr_1missing_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_evt_sys_attr_missing_t *arg1 = (ble_gatts_evt_sys_attr_missing_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_evt_sys_attr_missing_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1hvc_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_evt_hvc_t *arg1 = (ble_gatts_evt_hvc_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_hvc_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1hvc_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_evt_hvc_t *arg1 = (ble_gatts_evt_hvc_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_hvc_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1evt_1hvc_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_evt_hvc_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_evt_hvc_t *)new ble_gatts_evt_hvc_t();
  *(ble_gatts_evt_hvc_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1evt_1hvc_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_evt_hvc_t *arg1 = (ble_gatts_evt_hvc_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_evt_hvc_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1exchange_1mtu_1request_1t_1client_1rx_1mtu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_evt_exchange_mtu_request_t *arg1 = (ble_gatts_evt_exchange_mtu_request_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_exchange_mtu_request_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->client_rx_mtu = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1exchange_1mtu_1request_1t_1client_1rx_1mtu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_evt_exchange_mtu_request_t *arg1 = (ble_gatts_evt_exchange_mtu_request_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_exchange_mtu_request_t **)&jarg1; 
  result = (uint16_t) ((arg1)->client_rx_mtu);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1evt_1exchange_1mtu_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_evt_exchange_mtu_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_evt_exchange_mtu_request_t *)new ble_gatts_evt_exchange_mtu_request_t();
  *(ble_gatts_evt_exchange_mtu_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1evt_1exchange_1mtu_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_evt_exchange_mtu_request_t *arg1 = (ble_gatts_evt_exchange_mtu_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_evt_exchange_mtu_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1timeout_1t_1src_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_evt_timeout_t *arg1 = (ble_gatts_evt_timeout_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_timeout_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->src = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1timeout_1t_1src_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_evt_timeout_t *arg1 = (ble_gatts_evt_timeout_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_timeout_t **)&jarg1; 
  result = (uint8_t) ((arg1)->src);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1evt_1timeout_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_evt_timeout_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_evt_timeout_t *)new ble_gatts_evt_timeout_t();
  *(ble_gatts_evt_timeout_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1evt_1timeout_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_evt_timeout_t *arg1 = (ble_gatts_evt_timeout_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_evt_timeout_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1hvn_1tx_1complete_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gatts_evt_hvn_tx_complete_t *arg1 = (ble_gatts_evt_hvn_tx_complete_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_hvn_tx_complete_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1hvn_1tx_1complete_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gatts_evt_hvn_tx_complete_t *arg1 = (ble_gatts_evt_hvn_tx_complete_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_hvn_tx_complete_t **)&jarg1; 
  result = (uint8_t) ((arg1)->count);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1evt_1hvn_1tx_1complete_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_evt_hvn_tx_complete_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_evt_hvn_tx_complete_t *)new ble_gatts_evt_hvn_tx_complete_t();
  *(ble_gatts_evt_hvn_tx_complete_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1evt_1hvn_1tx_1complete_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_evt_hvn_tx_complete_t *arg1 = (ble_gatts_evt_hvn_tx_complete_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_evt_hvn_tx_complete_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1t_1conn_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gatts_evt_t *arg1 = (ble_gatts_evt_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gatts_1evt_1t_1conn_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gatts_evt_t *arg1 = (ble_gatts_evt_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gatts_evt_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gatts_1evt_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gatts_evt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gatts_evt_t *)new ble_gatts_evt_t();
  *(ble_gatts_evt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gatts_1evt_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gatts_evt_t *arg1 = (ble_gatts_evt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gatts_evt_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1service_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint8_t arg2 ;
  ble_uuid_t *arg3 = (ble_uuid_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = *(ble_uuid_t **)&jarg3; 
  arg4 = *(uint16_t **)&jarg4; 
  result = (uint32_t)sd_ble_gatts_service_add(arg1,arg2,(ble_uuid_t const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1include_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = *(uint16_t **)&jarg4; 
  result = (uint32_t)sd_ble_gatts_include_add(arg1,arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1characteristic_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gatts_char_md_t *arg3 = (ble_gatts_char_md_t *) 0 ;
  ble_gatts_attr_t *arg4 = (ble_gatts_attr_t *) 0 ;
  ble_gatts_char_handles_t *arg5 = (ble_gatts_char_handles_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gatts_char_md_t **)&jarg3; 
  arg4 = *(ble_gatts_attr_t **)&jarg4; 
  arg5 = *(ble_gatts_char_handles_t **)&jarg5; 
  result = (uint32_t)sd_ble_gatts_characteristic_add(arg1,arg2,(ble_gatts_char_md_t const *)arg3,(ble_gatts_attr_t const *)arg4,arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1descriptor_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gatts_attr_t *arg3 = (ble_gatts_attr_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gatts_attr_t **)&jarg3; 
  arg4 = *(uint16_t **)&jarg4; 
  result = (uint32_t)sd_ble_gatts_descriptor_add(arg1,arg2,(ble_gatts_attr_t const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  ble_gatts_value_t *arg4 = (ble_gatts_value_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = *(ble_gatts_value_t **)&jarg4; 
  result = (uint32_t)sd_ble_gatts_value_set(arg1,arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  ble_gatts_value_t *arg4 = (ble_gatts_value_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = *(ble_gatts_value_t **)&jarg4; 
  result = (uint32_t)sd_ble_gatts_value_get(arg1,arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1hvx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gatts_hvx_params_t *arg3 = (ble_gatts_hvx_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gatts_hvx_params_t **)&jarg3; 
  result = (uint32_t)sd_ble_gatts_hvx(arg1,arg2,(ble_gatts_hvx_params_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1service_1changed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  result = (uint32_t)sd_ble_gatts_service_changed(arg1,arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1rw_1authorize_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gatts_rw_authorize_reply_params_t *arg3 = (ble_gatts_rw_authorize_reply_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gatts_rw_authorize_reply_params_t **)&jarg3; 
  result = (uint32_t)sd_ble_gatts_rw_authorize_reply(arg1,arg2,(ble_gatts_rw_authorize_reply_params_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1sys_1attr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, void * jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint16_t arg4 ;
  uint32_t arg5 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint8_t *)jarg3; 
  arg4 = (uint16_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  result = (uint32_t)sd_ble_gatts_sys_attr_set(arg1,arg2,(unsigned char const *)arg3,arg4,arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1sys_1attr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, void * jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  uint32_t arg5 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint8_t *)jarg3; 
  arg4 = *(uint16_t **)&jarg4; 
  arg5 = (uint32_t)jarg5; 
  result = (uint32_t)sd_ble_gatts_sys_attr_get(arg1,arg2,arg3,arg4,arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1initial_1user_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = *(uint16_t **)&jarg2; 
  result = (uint32_t)sd_ble_gatts_initial_user_handle_get(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1attr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_uuid_t *arg3 = (ble_uuid_t *) 0 ;
  ble_gatts_attr_md_t *arg4 = (ble_gatts_attr_md_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_uuid_t **)&jarg3; 
  arg4 = *(ble_gatts_attr_md_t **)&jarg4; 
  result = (uint32_t)sd_ble_gatts_attr_get(arg1,arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gatts_1exchange_1mtu_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (uint32_t)sd_ble_gatts_exchange_mtu_reply(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1conn_1cfg_1t_1write_1cmd_1tx_1queue_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gattc_conn_cfg_t *arg1 = (ble_gattc_conn_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_conn_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->write_cmd_tx_queue_size = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1conn_1cfg_1t_1write_1cmd_1tx_1queue_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gattc_conn_cfg_t *arg1 = (ble_gattc_conn_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_conn_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->write_cmd_tx_queue_size);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_conn_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_conn_cfg_t *)new ble_gattc_conn_cfg_t();
  *(ble_gattc_conn_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_conn_cfg_t *arg1 = (ble_gattc_conn_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_conn_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1handle_1range_1t_1start_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_handle_range_t *arg1 = (ble_gattc_handle_range_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_handle_range_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->start_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1handle_1range_1t_1start_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_handle_range_t *arg1 = (ble_gattc_handle_range_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_handle_range_t **)&jarg1; 
  result = (uint16_t) ((arg1)->start_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1handle_1range_1t_1end_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_handle_range_t *arg1 = (ble_gattc_handle_range_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_handle_range_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->end_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1handle_1range_1t_1end_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_handle_range_t *arg1 = (ble_gattc_handle_range_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_handle_range_t **)&jarg1; 
  result = (uint16_t) ((arg1)->end_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1handle_1range_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_handle_range_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_handle_range_t *)new ble_gattc_handle_range_t();
  *(ble_gattc_handle_range_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1handle_1range_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_handle_range_t *arg1 = (ble_gattc_handle_range_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_handle_range_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1service_1t_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_service_t *arg1 = (ble_gattc_service_t *) 0 ;
  ble_uuid_t *arg2 = (ble_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_service_t **)&jarg1; 
  arg2 = *(ble_uuid_t **)&jarg2; 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1service_1t_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_service_t *arg1 = (ble_gattc_service_t *) 0 ;
  ble_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_service_t **)&jarg1; 
  result = (ble_uuid_t *)& ((arg1)->uuid);
  *(ble_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1service_1t_1handle_1range_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_service_t *arg1 = (ble_gattc_service_t *) 0 ;
  ble_gattc_handle_range_t *arg2 = (ble_gattc_handle_range_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_service_t **)&jarg1; 
  arg2 = *(ble_gattc_handle_range_t **)&jarg2; 
  if (arg1) (arg1)->handle_range = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1service_1t_1handle_1range_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_service_t *arg1 = (ble_gattc_service_t *) 0 ;
  ble_gattc_handle_range_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_service_t **)&jarg1; 
  result = (ble_gattc_handle_range_t *)& ((arg1)->handle_range);
  *(ble_gattc_handle_range_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1service_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_service_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_service_t *)new ble_gattc_service_t();
  *(ble_gattc_service_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1service_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_service_t *arg1 = (ble_gattc_service_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_service_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1include_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_include_t *arg1 = (ble_gattc_include_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_include_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1include_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_include_t *arg1 = (ble_gattc_include_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_include_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1include_1t_1included_1srvc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_include_t *arg1 = (ble_gattc_include_t *) 0 ;
  ble_gattc_service_t *arg2 = (ble_gattc_service_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_include_t **)&jarg1; 
  arg2 = *(ble_gattc_service_t **)&jarg2; 
  if (arg1) (arg1)->included_srvc = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1include_1t_1included_1srvc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_include_t *arg1 = (ble_gattc_include_t *) 0 ;
  ble_gattc_service_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_include_t **)&jarg1; 
  result = (ble_gattc_service_t *)& ((arg1)->included_srvc);
  *(ble_gattc_service_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1include_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_include_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_include_t *)new ble_gattc_include_t();
  *(ble_gattc_include_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1include_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_include_t *arg1 = (ble_gattc_include_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_include_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  ble_uuid_t *arg2 = (ble_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  arg2 = *(ble_uuid_t **)&jarg2; 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  ble_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  result = (ble_uuid_t *)& ((arg1)->uuid);
  *(ble_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1char_1props_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  ble_gatt_char_props_t *arg2 = (ble_gatt_char_props_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  arg2 = *(ble_gatt_char_props_t **)&jarg2; 
  if (arg1) (arg1)->char_props = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1char_1props_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  ble_gatt_char_props_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  result = (ble_gatt_char_props_t *)& ((arg1)->char_props);
  *(ble_gatt_char_props_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1char_1ext_1props_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->char_ext_props = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1char_1ext_1props_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  result = (uint8_t) ((arg1)->char_ext_props);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1handle_1decl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle_decl = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1handle_1decl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle_decl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1handle_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle_value = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1char_1t_1handle_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle_value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1char_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_char_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_char_t *)new ble_gattc_char_t();
  *(ble_gattc_char_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1char_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_char_t *arg1 = (ble_gattc_char_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_char_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1desc_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_desc_t *arg1 = (ble_gattc_desc_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_desc_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1desc_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_desc_t *arg1 = (ble_gattc_desc_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_desc_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1desc_1t_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_desc_t *arg1 = (ble_gattc_desc_t *) 0 ;
  ble_uuid_t *arg2 = (ble_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_desc_t **)&jarg1; 
  arg2 = *(ble_uuid_t **)&jarg2; 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1desc_1t_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_desc_t *arg1 = (ble_gattc_desc_t *) 0 ;
  ble_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_desc_t **)&jarg1; 
  result = (ble_uuid_t *)& ((arg1)->uuid);
  *(ble_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1desc_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_desc_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_desc_t *)new ble_gattc_desc_t();
  *(ble_gattc_desc_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1desc_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_desc_t *arg1 = (ble_gattc_desc_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_desc_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1write_1op_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->write_op = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1write_1op_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->write_op);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  result = (uint8_t) ((arg1)->flags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->offset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_value = (uint8_t const *)arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1write_1params_1t_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1write_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_write_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_write_params_t *)new ble_gattc_write_params_t();
  *(ble_gattc_write_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1write_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_write_params_t *arg1 = (ble_gattc_write_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_write_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1attr_1info16_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_attr_info16_t *arg1 = (ble_gattc_attr_info16_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_attr_info16_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1attr_1info16_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_attr_info16_t *arg1 = (ble_gattc_attr_info16_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_attr_info16_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1attr_1info16_1t_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_attr_info16_t *arg1 = (ble_gattc_attr_info16_t *) 0 ;
  ble_uuid_t *arg2 = (ble_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_attr_info16_t **)&jarg1; 
  arg2 = *(ble_uuid_t **)&jarg2; 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1attr_1info16_1t_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_attr_info16_t *arg1 = (ble_gattc_attr_info16_t *) 0 ;
  ble_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_attr_info16_t **)&jarg1; 
  result = (ble_uuid_t *)& ((arg1)->uuid);
  *(ble_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1attr_1info16_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_attr_info16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_attr_info16_t *)new ble_gattc_attr_info16_t();
  *(ble_gattc_attr_info16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1attr_1info16_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_attr_info16_t *arg1 = (ble_gattc_attr_info16_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_attr_info16_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1attr_1info128_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_attr_info128_t *arg1 = (ble_gattc_attr_info128_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_attr_info128_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1attr_1info128_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_attr_info128_t *arg1 = (ble_gattc_attr_info128_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_attr_info128_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1attr_1info128_1t_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_attr_info128_t *arg1 = (ble_gattc_attr_info128_t *) 0 ;
  ble_uuid128_t *arg2 = (ble_uuid128_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_attr_info128_t **)&jarg1; 
  arg2 = *(ble_uuid128_t **)&jarg2; 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1attr_1info128_1t_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_attr_info128_t *arg1 = (ble_gattc_attr_info128_t *) 0 ;
  ble_uuid128_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_attr_info128_t **)&jarg1; 
  result = (ble_uuid128_t *)& ((arg1)->uuid);
  *(ble_uuid128_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1attr_1info128_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_attr_info128_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_attr_info128_t *)new ble_gattc_attr_info128_t();
  *(ble_gattc_attr_info128_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1attr_1info128_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_attr_info128_t *arg1 = (ble_gattc_attr_info128_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_attr_info128_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1prim_1srvc_1disc_1rsp_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_prim_srvc_disc_rsp_t *arg1 = (ble_gattc_evt_prim_srvc_disc_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_prim_srvc_disc_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1prim_1srvc_1disc_1rsp_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_prim_srvc_disc_rsp_t *arg1 = (ble_gattc_evt_prim_srvc_disc_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_prim_srvc_disc_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1prim_1srvc_1disc_1rsp_1t_1services_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_evt_prim_srvc_disc_rsp_t *arg1 = (ble_gattc_evt_prim_srvc_disc_rsp_t *) 0 ;
  ble_gattc_service_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_evt_prim_srvc_disc_rsp_t **)&jarg1; 
  arg2 = *(ble_gattc_service_t **)&jarg2; 
  {
    size_t ii;
    ble_gattc_service_t *b = (ble_gattc_service_t *) arg1->services;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((ble_gattc_service_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1prim_1srvc_1disc_1rsp_1t_1services_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_evt_prim_srvc_disc_rsp_t *arg1 = (ble_gattc_evt_prim_srvc_disc_rsp_t *) 0 ;
  ble_gattc_service_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_prim_srvc_disc_rsp_t **)&jarg1; 
  result = (ble_gattc_service_t *)(ble_gattc_service_t *) ((arg1)->services);
  *(ble_gattc_service_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1prim_1srvc_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_prim_srvc_disc_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_prim_srvc_disc_rsp_t *)new ble_gattc_evt_prim_srvc_disc_rsp_t();
  *(ble_gattc_evt_prim_srvc_disc_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1prim_1srvc_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_prim_srvc_disc_rsp_t *arg1 = (ble_gattc_evt_prim_srvc_disc_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_prim_srvc_disc_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1rel_1disc_1rsp_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_rel_disc_rsp_t *arg1 = (ble_gattc_evt_rel_disc_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_rel_disc_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1rel_1disc_1rsp_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_rel_disc_rsp_t *arg1 = (ble_gattc_evt_rel_disc_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_rel_disc_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1rel_1disc_1rsp_1t_1includes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_evt_rel_disc_rsp_t *arg1 = (ble_gattc_evt_rel_disc_rsp_t *) 0 ;
  ble_gattc_include_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_evt_rel_disc_rsp_t **)&jarg1; 
  arg2 = *(ble_gattc_include_t **)&jarg2; 
  {
    size_t ii;
    ble_gattc_include_t *b = (ble_gattc_include_t *) arg1->includes;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((ble_gattc_include_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1rel_1disc_1rsp_1t_1includes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_evt_rel_disc_rsp_t *arg1 = (ble_gattc_evt_rel_disc_rsp_t *) 0 ;
  ble_gattc_include_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_rel_disc_rsp_t **)&jarg1; 
  result = (ble_gattc_include_t *)(ble_gattc_include_t *) ((arg1)->includes);
  *(ble_gattc_include_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1rel_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_rel_disc_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_rel_disc_rsp_t *)new ble_gattc_evt_rel_disc_rsp_t();
  *(ble_gattc_evt_rel_disc_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1rel_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_rel_disc_rsp_t *arg1 = (ble_gattc_evt_rel_disc_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_rel_disc_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1disc_1rsp_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_char_disc_rsp_t *arg1 = (ble_gattc_evt_char_disc_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_disc_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1disc_1rsp_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_char_disc_rsp_t *arg1 = (ble_gattc_evt_char_disc_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_disc_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1disc_1rsp_1t_1chars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_evt_char_disc_rsp_t *arg1 = (ble_gattc_evt_char_disc_rsp_t *) 0 ;
  ble_gattc_char_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_evt_char_disc_rsp_t **)&jarg1; 
  arg2 = *(ble_gattc_char_t **)&jarg2; 
  {
    size_t ii;
    ble_gattc_char_t *b = (ble_gattc_char_t *) arg1->chars;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((ble_gattc_char_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1disc_1rsp_1t_1chars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_evt_char_disc_rsp_t *arg1 = (ble_gattc_evt_char_disc_rsp_t *) 0 ;
  ble_gattc_char_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_disc_rsp_t **)&jarg1; 
  result = (ble_gattc_char_t *)(ble_gattc_char_t *) ((arg1)->chars);
  *(ble_gattc_char_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1char_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_char_disc_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_char_disc_rsp_t *)new ble_gattc_evt_char_disc_rsp_t();
  *(ble_gattc_evt_char_disc_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1char_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_char_disc_rsp_t *arg1 = (ble_gattc_evt_char_disc_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_char_disc_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1desc_1disc_1rsp_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_desc_disc_rsp_t *arg1 = (ble_gattc_evt_desc_disc_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_desc_disc_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1desc_1disc_1rsp_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_desc_disc_rsp_t *arg1 = (ble_gattc_evt_desc_disc_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_desc_disc_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1desc_1disc_1rsp_1t_1descs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_gattc_evt_desc_disc_rsp_t *arg1 = (ble_gattc_evt_desc_disc_rsp_t *) 0 ;
  ble_gattc_desc_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_evt_desc_disc_rsp_t **)&jarg1; 
  arg2 = *(ble_gattc_desc_t **)&jarg2; 
  {
    size_t ii;
    ble_gattc_desc_t *b = (ble_gattc_desc_t *) arg1->descs;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((ble_gattc_desc_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1desc_1disc_1rsp_1t_1descs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_evt_desc_disc_rsp_t *arg1 = (ble_gattc_evt_desc_disc_rsp_t *) 0 ;
  ble_gattc_desc_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_desc_disc_rsp_t **)&jarg1; 
  result = (ble_gattc_desc_t *)(ble_gattc_desc_t *) ((arg1)->descs);
  *(ble_gattc_desc_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1desc_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_desc_disc_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_desc_disc_rsp_t *)new ble_gattc_evt_desc_disc_rsp_t();
  *(ble_gattc_evt_desc_disc_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1desc_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_desc_disc_rsp_t *arg1 = (ble_gattc_evt_desc_disc_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_desc_disc_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1attr_1info_1disc_1rsp_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_attr_info_disc_rsp_t *arg1 = (ble_gattc_evt_attr_info_disc_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_attr_info_disc_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1attr_1info_1disc_1rsp_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_attr_info_disc_rsp_t *arg1 = (ble_gattc_evt_attr_info_disc_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_attr_info_disc_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1attr_1info_1disc_1rsp_1t_1format_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gattc_evt_attr_info_disc_rsp_t *arg1 = (ble_gattc_evt_attr_info_disc_rsp_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_attr_info_disc_rsp_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1attr_1info_1disc_1rsp_1t_1format_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gattc_evt_attr_info_disc_rsp_t *arg1 = (ble_gattc_evt_attr_info_disc_rsp_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_attr_info_disc_rsp_t **)&jarg1; 
  result = (uint8_t) ((arg1)->format);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1attr_1info_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_attr_info_disc_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_attr_info_disc_rsp_t *)new ble_gattc_evt_attr_info_disc_rsp_t();
  *(ble_gattc_evt_attr_info_disc_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1attr_1info_1disc_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_attr_info_disc_rsp_t *arg1 = (ble_gattc_evt_attr_info_disc_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_attr_info_disc_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1handle_1value_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_handle_value_t *arg1 = (ble_gattc_handle_value_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_handle_value_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1handle_1value_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_handle_value_t *arg1 = (ble_gattc_handle_value_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_handle_value_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1handle_1value_1t_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_gattc_handle_value_t *arg1 = (ble_gattc_handle_value_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_handle_value_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1handle_1value_1t_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_gattc_handle_value_t *arg1 = (ble_gattc_handle_value_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_handle_value_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1handle_1value_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_handle_value_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_handle_value_t *)new ble_gattc_handle_value_t();
  *(ble_gattc_handle_value_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1handle_1value_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_handle_value_t *arg1 = (ble_gattc_handle_value_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_handle_value_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1val_1by_1uuid_1read_1rsp_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_char_val_by_uuid_read_rsp_t *arg1 = (ble_gattc_evt_char_val_by_uuid_read_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_val_by_uuid_read_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1val_1by_1uuid_1read_1rsp_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_char_val_by_uuid_read_rsp_t *arg1 = (ble_gattc_evt_char_val_by_uuid_read_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_val_by_uuid_read_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1val_1by_1uuid_1read_1rsp_1t_1value_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_char_val_by_uuid_read_rsp_t *arg1 = (ble_gattc_evt_char_val_by_uuid_read_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_val_by_uuid_read_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->value_len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1val_1by_1uuid_1read_1rsp_1t_1value_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_char_val_by_uuid_read_rsp_t *arg1 = (ble_gattc_evt_char_val_by_uuid_read_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_val_by_uuid_read_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->value_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1val_1by_1uuid_1read_1rsp_1t_1handle_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gattc_evt_char_val_by_uuid_read_rsp_t *arg1 = (ble_gattc_evt_char_val_by_uuid_read_rsp_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_val_by_uuid_read_rsp_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->handle_value;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1val_1by_1uuid_1read_1rsp_1t_1handle_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_evt_char_val_by_uuid_read_rsp_t *arg1 = (ble_gattc_evt_char_val_by_uuid_read_rsp_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_val_by_uuid_read_rsp_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->handle_value);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1char_1val_1by_1uuid_1read_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_char_val_by_uuid_read_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_char_val_by_uuid_read_rsp_t *)new ble_gattc_evt_char_val_by_uuid_read_rsp_t();
  *(ble_gattc_evt_char_val_by_uuid_read_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1char_1val_1by_1uuid_1read_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_char_val_by_uuid_read_rsp_t *arg1 = (ble_gattc_evt_char_val_by_uuid_read_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_char_val_by_uuid_read_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1read_1rsp_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_read_rsp_t *arg1 = (ble_gattc_evt_read_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_read_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1read_1rsp_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_read_rsp_t *arg1 = (ble_gattc_evt_read_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_read_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1read_1rsp_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_read_rsp_t *arg1 = (ble_gattc_evt_read_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_read_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1read_1rsp_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_read_rsp_t *arg1 = (ble_gattc_evt_read_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_read_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->offset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1read_1rsp_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_read_rsp_t *arg1 = (ble_gattc_evt_read_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_read_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1read_1rsp_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_read_rsp_t *arg1 = (ble_gattc_evt_read_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_read_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1read_1rsp_1t_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gattc_evt_read_rsp_t *arg1 = (ble_gattc_evt_read_rsp_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_read_rsp_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->data;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1read_1rsp_1t_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_evt_read_rsp_t *arg1 = (ble_gattc_evt_read_rsp_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_read_rsp_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1read_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_read_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_read_rsp_t *)new ble_gattc_evt_read_rsp_t();
  *(ble_gattc_evt_read_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1read_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_read_rsp_t *arg1 = (ble_gattc_evt_read_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_read_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1vals_1read_1rsp_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_char_vals_read_rsp_t *arg1 = (ble_gattc_evt_char_vals_read_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_vals_read_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1vals_1read_1rsp_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_char_vals_read_rsp_t *arg1 = (ble_gattc_evt_char_vals_read_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_vals_read_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1vals_1read_1rsp_1t_1values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gattc_evt_char_vals_read_rsp_t *arg1 = (ble_gattc_evt_char_vals_read_rsp_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_vals_read_rsp_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->values;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1char_1vals_1read_1rsp_1t_1values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_evt_char_vals_read_rsp_t *arg1 = (ble_gattc_evt_char_vals_read_rsp_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_char_vals_read_rsp_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->values);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1char_1vals_1read_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_char_vals_read_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_char_vals_read_rsp_t *)new ble_gattc_evt_char_vals_read_rsp_t();
  *(ble_gattc_evt_char_vals_read_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1char_1vals_1read_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_char_vals_read_rsp_t *arg1 = (ble_gattc_evt_char_vals_read_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_char_vals_read_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1write_1op_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->write_op = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1write_1op_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  result = (uint8_t) ((arg1)->write_op);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->offset);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->data;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1rsp_1t_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1write_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_write_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_write_rsp_t *)new ble_gattc_evt_write_rsp_t();
  *(ble_gattc_evt_write_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1write_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_write_rsp_t *arg1 = (ble_gattc_evt_write_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_write_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1hvx_1t_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_hvx_t *arg1 = (ble_gattc_evt_hvx_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_hvx_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1hvx_1t_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_hvx_t *arg1 = (ble_gattc_evt_hvx_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_hvx_t **)&jarg1; 
  result = (uint16_t) ((arg1)->handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1hvx_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gattc_evt_hvx_t *arg1 = (ble_gattc_evt_hvx_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_hvx_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1hvx_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gattc_evt_hvx_t *arg1 = (ble_gattc_evt_hvx_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_hvx_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1hvx_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_hvx_t *arg1 = (ble_gattc_evt_hvx_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_hvx_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1hvx_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_hvx_t *arg1 = (ble_gattc_evt_hvx_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_hvx_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1hvx_1t_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_gattc_evt_hvx_t *arg1 = (ble_gattc_evt_hvx_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_hvx_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->data;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1hvx_1t_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_gattc_evt_hvx_t *arg1 = (ble_gattc_evt_hvx_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_hvx_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1hvx_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_hvx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_hvx_t *)new ble_gattc_evt_hvx_t();
  *(ble_gattc_evt_hvx_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1hvx_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_hvx_t *arg1 = (ble_gattc_evt_hvx_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_hvx_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1exchange_1mtu_1rsp_1t_1server_1rx_1mtu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_exchange_mtu_rsp_t *arg1 = (ble_gattc_evt_exchange_mtu_rsp_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_exchange_mtu_rsp_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->server_rx_mtu = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1exchange_1mtu_1rsp_1t_1server_1rx_1mtu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_exchange_mtu_rsp_t *arg1 = (ble_gattc_evt_exchange_mtu_rsp_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_exchange_mtu_rsp_t **)&jarg1; 
  result = (uint16_t) ((arg1)->server_rx_mtu);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1exchange_1mtu_1rsp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_exchange_mtu_rsp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_exchange_mtu_rsp_t *)new ble_gattc_evt_exchange_mtu_rsp_t();
  *(ble_gattc_evt_exchange_mtu_rsp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1exchange_1mtu_1rsp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_exchange_mtu_rsp_t *arg1 = (ble_gattc_evt_exchange_mtu_rsp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_exchange_mtu_rsp_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1timeout_1t_1src_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gattc_evt_timeout_t *arg1 = (ble_gattc_evt_timeout_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_timeout_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->src = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1timeout_1t_1src_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gattc_evt_timeout_t *arg1 = (ble_gattc_evt_timeout_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_timeout_t **)&jarg1; 
  result = (uint8_t) ((arg1)->src);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1timeout_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_timeout_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_timeout_t *)new ble_gattc_evt_timeout_t();
  *(ble_gattc_evt_timeout_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1timeout_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_timeout_t *arg1 = (ble_gattc_evt_timeout_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_timeout_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1cmd_1tx_1complete_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_gattc_evt_write_cmd_tx_complete_t *arg1 = (ble_gattc_evt_write_cmd_tx_complete_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_cmd_tx_complete_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1write_1cmd_1tx_1complete_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_gattc_evt_write_cmd_tx_complete_t *arg1 = (ble_gattc_evt_write_cmd_tx_complete_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_write_cmd_tx_complete_t **)&jarg1; 
  result = (uint8_t) ((arg1)->count);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1write_1cmd_1tx_1complete_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_write_cmd_tx_complete_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_write_cmd_tx_complete_t *)new ble_gattc_evt_write_cmd_tx_complete_t();
  *(ble_gattc_evt_write_cmd_tx_complete_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1write_1cmd_1tx_1complete_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_write_cmd_tx_complete_t *arg1 = (ble_gattc_evt_write_cmd_tx_complete_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_write_cmd_tx_complete_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1t_1conn_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_t *arg1 = (ble_gattc_evt_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1t_1conn_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_t *arg1 = (ble_gattc_evt_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1t_1gatt_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_t *arg1 = (ble_gattc_evt_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->gatt_status = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1t_1gatt_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_t *arg1 = (ble_gattc_evt_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_t **)&jarg1; 
  result = (uint16_t) ((arg1)->gatt_status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1t_1error_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_gattc_evt_t *arg1 = (ble_gattc_evt_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->error_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1gattc_1evt_1t_1error_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_gattc_evt_t *arg1 = (ble_gattc_evt_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_gattc_evt_t **)&jarg1; 
  result = (uint16_t) ((arg1)->error_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1gattc_1evt_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_gattc_evt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_gattc_evt_t *)new ble_gattc_evt_t();
  *(ble_gattc_evt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1gattc_1evt_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_gattc_evt_t *arg1 = (ble_gattc_evt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_gattc_evt_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1primary_1services_1discover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  ble_uuid_t *arg4 = (ble_uuid_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = *(ble_uuid_t **)&jarg4; 
  result = (uint32_t)sd_ble_gattc_primary_services_discover(arg1,arg2,arg3,(ble_uuid_t const *)arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1relationships_1discover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gattc_handle_range_t *arg3 = (ble_gattc_handle_range_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gattc_handle_range_t **)&jarg3; 
  result = (uint32_t)sd_ble_gattc_relationships_discover(arg1,arg2,(ble_gattc_handle_range_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1characteristics_1discover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gattc_handle_range_t *arg3 = (ble_gattc_handle_range_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gattc_handle_range_t **)&jarg3; 
  result = (uint32_t)sd_ble_gattc_characteristics_discover(arg1,arg2,(ble_gattc_handle_range_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1descriptors_1discover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gattc_handle_range_t *arg3 = (ble_gattc_handle_range_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gattc_handle_range_t **)&jarg3; 
  result = (uint32_t)sd_ble_gattc_descriptors_discover(arg1,arg2,(ble_gattc_handle_range_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1char_1value_1by_1uuid_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_uuid_t *arg3 = (ble_uuid_t *) 0 ;
  ble_gattc_handle_range_t *arg4 = (ble_gattc_handle_range_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_uuid_t **)&jarg3; 
  arg4 = *(ble_gattc_handle_range_t **)&jarg4; 
  result = (uint32_t)sd_ble_gattc_char_value_by_uuid_read(arg1,arg2,(ble_uuid_t const *)arg3,(ble_gattc_handle_range_t const *)arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  result = (uint32_t)sd_ble_gattc_read(arg1,arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1char_1values_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint16_t arg4 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(uint16_t **)&jarg3; 
  arg4 = (uint16_t)jarg4; 
  result = (uint32_t)sd_ble_gattc_char_values_read(arg1,arg2,(unsigned short const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gattc_write_params_t *arg3 = (ble_gattc_write_params_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gattc_write_params_t **)&jarg3; 
  result = (uint32_t)sd_ble_gattc_write(arg1,arg2,(ble_gattc_write_params_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1hv_1confirm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (uint32_t)sd_ble_gattc_hv_confirm(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1attr_1info_1discover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  ble_gattc_handle_range_t *arg3 = (ble_gattc_handle_range_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(ble_gattc_handle_range_t **)&jarg3; 
  result = (uint32_t)sd_ble_gattc_attr_info_discover(arg1,arg2,(ble_gattc_handle_range_t const *)arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1exchange_1mtu_1request(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (uint32_t)sd_ble_gattc_exchange_mtu_request(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1ble_1gattc_1evt_1char_1val_1by_1uuid_1read_1rsp_1iter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ble_gattc_evt_t *arg1 = (ble_gattc_evt_t *) 0 ;
  ble_gattc_handle_value_t *arg2 = (ble_gattc_handle_value_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_gattc_evt_t **)&jarg1; 
  arg2 = *(ble_gattc_handle_value_t **)&jarg2; 
  result = (uint32_t)sd_ble_gattc_evt_char_val_by_uuid_read_rsp_iter(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1rx_1mps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->rx_mps = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1rx_1mps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  result = (uint16_t) ((arg1)->rx_mps);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1tx_1mps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->tx_mps = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1tx_1mps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  result = (uint16_t) ((arg1)->tx_mps);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1rx_1queue_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->rx_queue_size = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1rx_1queue_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->rx_queue_size);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1tx_1queue_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->tx_queue_size = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1tx_1queue_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->tx_queue_size);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1ch_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ch_count = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1conn_1cfg_1t_1ch_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  result = (uint8_t) ((arg1)->ch_count);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_conn_cfg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_conn_cfg_t *)new ble_l2cap_conn_cfg_t();
  *(ble_l2cap_conn_cfg_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1conn_1cfg_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_conn_cfg_t *arg1 = (ble_l2cap_conn_cfg_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_conn_cfg_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1rx_1params_1t_1rx_1mtu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_ch_rx_params_t *arg1 = (ble_l2cap_ch_rx_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_rx_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->rx_mtu = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1rx_1params_1t_1rx_1mtu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_ch_rx_params_t *arg1 = (ble_l2cap_ch_rx_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_rx_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->rx_mtu);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1rx_1params_1t_1rx_1mps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_ch_rx_params_t *arg1 = (ble_l2cap_ch_rx_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_rx_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->rx_mps = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1rx_1params_1t_1rx_1mps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_ch_rx_params_t *arg1 = (ble_l2cap_ch_rx_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_rx_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->rx_mps);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1rx_1params_1t_1sdu_1buf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_l2cap_ch_rx_params_t *arg1 = (ble_l2cap_ch_rx_params_t *) 0 ;
  ble_data_t *arg2 = (ble_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_l2cap_ch_rx_params_t **)&jarg1; 
  arg2 = *(ble_data_t **)&jarg2; 
  if (arg1) (arg1)->sdu_buf = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1rx_1params_1t_1sdu_1buf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_l2cap_ch_rx_params_t *arg1 = (ble_l2cap_ch_rx_params_t *) 0 ;
  ble_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_rx_params_t **)&jarg1; 
  result = (ble_data_t *)& ((arg1)->sdu_buf);
  *(ble_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1ch_1rx_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_ch_rx_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_ch_rx_params_t *)new ble_l2cap_ch_rx_params_t();
  *(ble_l2cap_ch_rx_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1ch_1rx_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_ch_rx_params_t *arg1 = (ble_l2cap_ch_rx_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_ch_rx_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1setup_1params_1t_1rx_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_l2cap_ch_setup_params_t *arg1 = (ble_l2cap_ch_setup_params_t *) 0 ;
  ble_l2cap_ch_rx_params_t *arg2 = (ble_l2cap_ch_rx_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_l2cap_ch_setup_params_t **)&jarg1; 
  arg2 = *(ble_l2cap_ch_rx_params_t **)&jarg2; 
  if (arg1) (arg1)->rx_params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1setup_1params_1t_1rx_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_l2cap_ch_setup_params_t *arg1 = (ble_l2cap_ch_setup_params_t *) 0 ;
  ble_l2cap_ch_rx_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_setup_params_t **)&jarg1; 
  result = (ble_l2cap_ch_rx_params_t *)& ((arg1)->rx_params);
  *(ble_l2cap_ch_rx_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1setup_1params_1t_1le_1psm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_ch_setup_params_t *arg1 = (ble_l2cap_ch_setup_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_setup_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->le_psm = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1setup_1params_1t_1le_1psm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_ch_setup_params_t *arg1 = (ble_l2cap_ch_setup_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_setup_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->le_psm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1setup_1params_1t_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_ch_setup_params_t *arg1 = (ble_l2cap_ch_setup_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_setup_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1setup_1params_1t_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_ch_setup_params_t *arg1 = (ble_l2cap_ch_setup_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_setup_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1ch_1setup_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_ch_setup_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_ch_setup_params_t *)new ble_l2cap_ch_setup_params_t();
  *(ble_l2cap_ch_setup_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1ch_1setup_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_ch_setup_params_t *arg1 = (ble_l2cap_ch_setup_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_ch_setup_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1tx_1params_1t_1tx_1mtu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_ch_tx_params_t *arg1 = (ble_l2cap_ch_tx_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_tx_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->tx_mtu = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1tx_1params_1t_1tx_1mtu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_ch_tx_params_t *arg1 = (ble_l2cap_ch_tx_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_tx_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->tx_mtu);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1tx_1params_1t_1peer_1mps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_ch_tx_params_t *arg1 = (ble_l2cap_ch_tx_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_tx_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->peer_mps = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1tx_1params_1t_1peer_1mps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_ch_tx_params_t *arg1 = (ble_l2cap_ch_tx_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_tx_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->peer_mps);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1tx_1params_1t_1tx_1mps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_ch_tx_params_t *arg1 = (ble_l2cap_ch_tx_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_tx_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->tx_mps = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1tx_1params_1t_1tx_1mps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_ch_tx_params_t *arg1 = (ble_l2cap_ch_tx_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_tx_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->tx_mps);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1tx_1params_1t_1credits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_ch_tx_params_t *arg1 = (ble_l2cap_ch_tx_params_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_tx_params_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->credits = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1ch_1tx_1params_1t_1credits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_ch_tx_params_t *arg1 = (ble_l2cap_ch_tx_params_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_ch_tx_params_t **)&jarg1; 
  result = (uint16_t) ((arg1)->credits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1ch_1tx_1params_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_ch_tx_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_ch_tx_params_t *)new ble_l2cap_ch_tx_params_t();
  *(ble_l2cap_ch_tx_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1ch_1tx_1params_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_ch_tx_params_t *arg1 = (ble_l2cap_ch_tx_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_ch_tx_params_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1request_1t_1tx_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_l2cap_evt_ch_setup_request_t *arg1 = (ble_l2cap_evt_ch_setup_request_t *) 0 ;
  ble_l2cap_ch_tx_params_t *arg2 = (ble_l2cap_ch_tx_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_l2cap_evt_ch_setup_request_t **)&jarg1; 
  arg2 = *(ble_l2cap_ch_tx_params_t **)&jarg2; 
  if (arg1) (arg1)->tx_params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1request_1t_1tx_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_setup_request_t *arg1 = (ble_l2cap_evt_ch_setup_request_t *) 0 ;
  ble_l2cap_ch_tx_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_setup_request_t **)&jarg1; 
  result = (ble_l2cap_ch_tx_params_t *)& ((arg1)->tx_params);
  *(ble_l2cap_ch_tx_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1request_1t_1le_1psm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_evt_ch_setup_request_t *arg1 = (ble_l2cap_evt_ch_setup_request_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_setup_request_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->le_psm = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1request_1t_1le_1psm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_evt_ch_setup_request_t *arg1 = (ble_l2cap_evt_ch_setup_request_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_setup_request_t **)&jarg1; 
  result = (uint16_t) ((arg1)->le_psm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1evt_1ch_1setup_1request_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_setup_request_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_evt_ch_setup_request_t *)new ble_l2cap_evt_ch_setup_request_t();
  *(ble_l2cap_evt_ch_setup_request_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1evt_1ch_1setup_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_evt_ch_setup_request_t *arg1 = (ble_l2cap_evt_ch_setup_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_evt_ch_setup_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1refused_1t_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_l2cap_evt_ch_setup_refused_t *arg1 = (ble_l2cap_evt_ch_setup_refused_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_setup_refused_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1refused_1t_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_l2cap_evt_ch_setup_refused_t *arg1 = (ble_l2cap_evt_ch_setup_refused_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_setup_refused_t **)&jarg1; 
  result = (uint8_t) ((arg1)->source);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1refused_1t_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_evt_ch_setup_refused_t *arg1 = (ble_l2cap_evt_ch_setup_refused_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_setup_refused_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1refused_1t_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_evt_ch_setup_refused_t *arg1 = (ble_l2cap_evt_ch_setup_refused_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_setup_refused_t **)&jarg1; 
  result = (uint16_t) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1evt_1ch_1setup_1refused_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_setup_refused_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_evt_ch_setup_refused_t *)new ble_l2cap_evt_ch_setup_refused_t();
  *(ble_l2cap_evt_ch_setup_refused_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1evt_1ch_1setup_1refused_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_evt_ch_setup_refused_t *arg1 = (ble_l2cap_evt_ch_setup_refused_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_evt_ch_setup_refused_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1t_1tx_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_l2cap_evt_ch_setup_t *arg1 = (ble_l2cap_evt_ch_setup_t *) 0 ;
  ble_l2cap_ch_tx_params_t *arg2 = (ble_l2cap_ch_tx_params_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_l2cap_evt_ch_setup_t **)&jarg1; 
  arg2 = *(ble_l2cap_ch_tx_params_t **)&jarg2; 
  if (arg1) (arg1)->tx_params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1setup_1t_1tx_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_setup_t *arg1 = (ble_l2cap_evt_ch_setup_t *) 0 ;
  ble_l2cap_ch_tx_params_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_setup_t **)&jarg1; 
  result = (ble_l2cap_ch_tx_params_t *)& ((arg1)->tx_params);
  *(ble_l2cap_ch_tx_params_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1evt_1ch_1setup_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_setup_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_evt_ch_setup_t *)new ble_l2cap_evt_ch_setup_t();
  *(ble_l2cap_evt_ch_setup_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1evt_1ch_1setup_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_evt_ch_setup_t *arg1 = (ble_l2cap_evt_ch_setup_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_evt_ch_setup_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1sdu_1buf_1released_1t_1sdu_1buf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_l2cap_evt_ch_sdu_buf_released_t *arg1 = (ble_l2cap_evt_ch_sdu_buf_released_t *) 0 ;
  ble_data_t *arg2 = (ble_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_l2cap_evt_ch_sdu_buf_released_t **)&jarg1; 
  arg2 = *(ble_data_t **)&jarg2; 
  if (arg1) (arg1)->sdu_buf = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1sdu_1buf_1released_1t_1sdu_1buf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_sdu_buf_released_t *arg1 = (ble_l2cap_evt_ch_sdu_buf_released_t *) 0 ;
  ble_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_sdu_buf_released_t **)&jarg1; 
  result = (ble_data_t *)& ((arg1)->sdu_buf);
  *(ble_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1evt_1ch_1sdu_1buf_1released_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_sdu_buf_released_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_evt_ch_sdu_buf_released_t *)new ble_l2cap_evt_ch_sdu_buf_released_t();
  *(ble_l2cap_evt_ch_sdu_buf_released_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1evt_1ch_1sdu_1buf_1released_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_evt_ch_sdu_buf_released_t *arg1 = (ble_l2cap_evt_ch_sdu_buf_released_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_evt_ch_sdu_buf_released_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1credit_1t_1credits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_evt_ch_credit_t *arg1 = (ble_l2cap_evt_ch_credit_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_credit_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->credits = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1credit_1t_1credits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_evt_ch_credit_t *arg1 = (ble_l2cap_evt_ch_credit_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_credit_t **)&jarg1; 
  result = (uint16_t) ((arg1)->credits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1evt_1ch_1credit_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_credit_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_evt_ch_credit_t *)new ble_l2cap_evt_ch_credit_t();
  *(ble_l2cap_evt_ch_credit_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1evt_1ch_1credit_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_evt_ch_credit_t *arg1 = (ble_l2cap_evt_ch_credit_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_evt_ch_credit_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1rx_1t_1sdu_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_evt_ch_rx_t *arg1 = (ble_l2cap_evt_ch_rx_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_rx_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->sdu_len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1rx_1t_1sdu_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_evt_ch_rx_t *arg1 = (ble_l2cap_evt_ch_rx_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_rx_t **)&jarg1; 
  result = (uint16_t) ((arg1)->sdu_len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1rx_1t_1sdu_1buf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_l2cap_evt_ch_rx_t *arg1 = (ble_l2cap_evt_ch_rx_t *) 0 ;
  ble_data_t *arg2 = (ble_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_l2cap_evt_ch_rx_t **)&jarg1; 
  arg2 = *(ble_data_t **)&jarg2; 
  if (arg1) (arg1)->sdu_buf = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1rx_1t_1sdu_1buf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_rx_t *arg1 = (ble_l2cap_evt_ch_rx_t *) 0 ;
  ble_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_rx_t **)&jarg1; 
  result = (ble_data_t *)& ((arg1)->sdu_buf);
  *(ble_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1evt_1ch_1rx_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_rx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_evt_ch_rx_t *)new ble_l2cap_evt_ch_rx_t();
  *(ble_l2cap_evt_ch_rx_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1evt_1ch_1rx_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_evt_ch_rx_t *arg1 = (ble_l2cap_evt_ch_rx_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_evt_ch_rx_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1tx_1t_1sdu_1buf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ble_l2cap_evt_ch_tx_t *arg1 = (ble_l2cap_evt_ch_tx_t *) 0 ;
  ble_data_t *arg2 = (ble_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ble_l2cap_evt_ch_tx_t **)&jarg1; 
  arg2 = *(ble_data_t **)&jarg2; 
  if (arg1) (arg1)->sdu_buf = *arg2;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1ch_1tx_1t_1sdu_1buf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_tx_t *arg1 = (ble_l2cap_evt_ch_tx_t *) 0 ;
  ble_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_ch_tx_t **)&jarg1; 
  result = (ble_data_t *)& ((arg1)->sdu_buf);
  *(ble_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1evt_1ch_1tx_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_evt_ch_tx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_evt_ch_tx_t *)new ble_l2cap_evt_ch_tx_t();
  *(ble_l2cap_evt_ch_tx_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1evt_1ch_1tx_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_evt_ch_tx_t *arg1 = (ble_l2cap_evt_ch_tx_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_evt_ch_tx_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1t_1conn_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_evt_t *arg1 = (ble_l2cap_evt_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->conn_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1t_1conn_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_evt_t *arg1 = (ble_l2cap_evt_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_t **)&jarg1; 
  result = (uint16_t) ((arg1)->conn_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1t_1local_1cid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_l2cap_evt_t *arg1 = (ble_l2cap_evt_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->local_cid = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1l2cap_1evt_1t_1local_1cid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_l2cap_evt_t *arg1 = (ble_l2cap_evt_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_l2cap_evt_t **)&jarg1; 
  result = (uint16_t) ((arg1)->local_cid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1l2cap_1evt_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_l2cap_evt_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_l2cap_evt_t *)new ble_l2cap_evt_t();
  *(ble_l2cap_evt_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1l2cap_1evt_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_l2cap_evt_t *arg1 = (ble_l2cap_evt_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_l2cap_evt_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1uuid128_1t_1uuid128_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ble_uuid128_t *arg1 = (ble_uuid128_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_uuid128_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->uuid128;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1uuid128_1t_1uuid128_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ble_uuid128_t *arg1 = (ble_uuid128_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_uuid128_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->uuid128);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1uuid128_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_uuid128_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_uuid128_t *)new ble_uuid128_t();
  *(ble_uuid128_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1uuid128_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_uuid128_t *arg1 = (ble_uuid128_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_uuid128_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1uuid_1t_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_uuid_t *arg1 = (ble_uuid_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_uuid_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->uuid = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1uuid_1t_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_uuid_t *arg1 = (ble_uuid_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_uuid_t **)&jarg1; 
  result = (uint16_t) ((arg1)->uuid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1uuid_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ble_uuid_t *arg1 = (ble_uuid_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_uuid_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1uuid_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ble_uuid_t *arg1 = (ble_uuid_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_uuid_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1uuid_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_uuid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_uuid_t *)new ble_uuid_t();
  *(ble_uuid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1uuid_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_uuid_t *arg1 = (ble_uuid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_uuid_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1data_1t_1p_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2) {
  ble_data_t *arg1 = (ble_data_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_data_t **)&jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->p_data = arg2;
}


SWIGEXPORT void * JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1data_1t_1p_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  void * jresult = 0 ;
  ble_data_t *arg1 = (ble_data_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_data_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1data_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ble_data_t *arg1 = (ble_data_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_data_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jint JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_ble_1data_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ble_data_t *arg1 = (ble_data_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ble_data_t **)&jarg1; 
  result = (uint16_t) ((arg1)->len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1ble_1data_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ble_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ble_data_t *)new ble_data_t();
  *(ble_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1ble_1data_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ble_data_t *arg1 = (ble_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ble_data_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1enum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sd_rpc_serial_port_desc_t *arg1 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2; 
  result = (uint32_t)sd_rpc_serial_port_enum(arg1,arg2);
  jresult = (jlong)result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1physical_1layer_1create_1uart(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  sd_rpc_flow_control_t arg3 ;
  sd_rpc_parity_t arg4 ;
  physical_layer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (uint32_t)jarg2; 
  arg3 = (sd_rpc_flow_control_t)jarg3; 
  arg4 = (sd_rpc_parity_t)jarg4; 
  result = (physical_layer_t *)sd_rpc_physical_layer_create_uart((char const *)arg1,arg2,arg3,arg4);
  *(physical_layer_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1data_1link_1layer_1create_1bt_1three_1wire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  physical_layer_t *arg1 = (physical_layer_t *) 0 ;
  uint32_t arg2 ;
  data_link_layer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(physical_layer_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (data_link_layer_t *)sd_rpc_data_link_layer_create_bt_three_wire(arg1,arg2);
  *(data_link_layer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1transport_1layer_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  data_link_layer_t *arg1 = (data_link_layer_t *) 0 ;
  uint32_t arg2 ;
  transport_layer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(data_link_layer_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (transport_layer_t *)sd_rpc_transport_layer_create(arg1,arg2);
  *(transport_layer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1adapter_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  transport_layer_t *arg1 = (transport_layer_t *) 0 ;
  adapter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(transport_layer_t **)&jarg1; 
  result = (adapter_t *)sd_rpc_adapter_create(arg1);
  *(adapter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1adapter_1delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  adapter_t *arg1 = (adapter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  sd_rpc_adapter_delete(arg1);
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, void * jarg2, void * jarg3, void * jarg4) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  sd_rpc_status_handler_t arg2 = (sd_rpc_status_handler_t) 0 ;
  sd_rpc_evt_handler_t arg3 = (sd_rpc_evt_handler_t) 0 ;
  sd_rpc_log_handler_t arg4 = (sd_rpc_log_handler_t) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (sd_rpc_status_handler_t)jarg2; 
  arg3 = (sd_rpc_evt_handler_t)jarg3; 
  arg4 = (sd_rpc_log_handler_t)jarg4; 
  result = (uint32_t)sd_rpc_open(arg1,arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  result = (uint32_t)sd_rpc_close(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1log_1handler_1severity_1filter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  adapter_t *arg1 = (adapter_t *) 0 ;
  sd_rpc_log_severity_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(adapter_t **)&jarg1; 
  arg2 = (sd_rpc_log_severity_t)jarg2; 
  result = (uint32_t)sd_rpc_log_handler_severity_filter_set(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->port, (const char *)arg2, 512-1);
      arg1->port[512-1] = 0;
    } else {
      arg1->port[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->port);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1manufacturer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->manufacturer, (const char *)arg2, 512-1);
      arg1->manufacturer[512-1] = 0;
    } else {
      arg1->manufacturer[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1manufacturer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->manufacturer);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1serialNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->serialNumber, (const char *)arg2, 512-1);
      arg1->serialNumber[512-1] = 0;
    } else {
      arg1->serialNumber[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1serialNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->serialNumber);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1pnpId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->pnpId, (const char *)arg2, 512-1);
      arg1->pnpId[512-1] = 0;
    } else {
      arg1->pnpId[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1pnpId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->pnpId);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1locationId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->locationId, (const char *)arg2, 512-1);
      arg1->locationId[512-1] = 0;
    } else {
      arg1->locationId[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1locationId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->locationId);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1vendorId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->vendorId, (const char *)arg2, 512-1);
      arg1->vendorId[512-1] = 0;
    } else {
      arg1->vendorId[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1vendorId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->vendorId);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1productId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->productId, (const char *)arg2, 512-1);
      arg1->productId[512-1] = 0;
    } else {
      arg1->productId[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_sd_1rpc_1serial_1port_1desc_1t_1productId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->productId);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_new_1sd_1rpc_1serial_1port_1desc_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sd_rpc_serial_port_desc_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (sd_rpc_serial_port_desc_t *)new sd_rpc_serial_port_desc_t();
  *(sd_rpc_serial_port_desc_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pc_1ble_1driver_1sd_1api_1v5JNI_delete_1sd_1rpc_1serial_1port_1desc_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sd_rpc_serial_port_desc_t *arg1 = (sd_rpc_serial_port_desc_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sd_rpc_serial_port_desc_t **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

