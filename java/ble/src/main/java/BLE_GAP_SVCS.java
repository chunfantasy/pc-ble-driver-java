/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public final class BLE_GAP_SVCS {
  public final static BLE_GAP_SVCS SD_BLE_GAP_ADDR_SET = new BLE_GAP_SVCS("SD_BLE_GAP_ADDR_SET", 0x70);
  public final static BLE_GAP_SVCS SD_BLE_GAP_ADDR_GET = new BLE_GAP_SVCS("SD_BLE_GAP_ADDR_GET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_WHITELIST_SET = new BLE_GAP_SVCS("SD_BLE_GAP_WHITELIST_SET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_DEVICE_IDENTITIES_SET = new BLE_GAP_SVCS("SD_BLE_GAP_DEVICE_IDENTITIES_SET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_PRIVACY_SET = new BLE_GAP_SVCS("SD_BLE_GAP_PRIVACY_SET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_PRIVACY_GET = new BLE_GAP_SVCS("SD_BLE_GAP_PRIVACY_GET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_ADV_DATA_SET = new BLE_GAP_SVCS("SD_BLE_GAP_ADV_DATA_SET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_ADV_START = new BLE_GAP_SVCS("SD_BLE_GAP_ADV_START");
  public final static BLE_GAP_SVCS SD_BLE_GAP_ADV_STOP = new BLE_GAP_SVCS("SD_BLE_GAP_ADV_STOP");
  public final static BLE_GAP_SVCS SD_BLE_GAP_CONN_PARAM_UPDATE = new BLE_GAP_SVCS("SD_BLE_GAP_CONN_PARAM_UPDATE");
  public final static BLE_GAP_SVCS SD_BLE_GAP_DISCONNECT = new BLE_GAP_SVCS("SD_BLE_GAP_DISCONNECT");
  public final static BLE_GAP_SVCS SD_BLE_GAP_TX_POWER_SET = new BLE_GAP_SVCS("SD_BLE_GAP_TX_POWER_SET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_APPEARANCE_SET = new BLE_GAP_SVCS("SD_BLE_GAP_APPEARANCE_SET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_APPEARANCE_GET = new BLE_GAP_SVCS("SD_BLE_GAP_APPEARANCE_GET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_PPCP_SET = new BLE_GAP_SVCS("SD_BLE_GAP_PPCP_SET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_PPCP_GET = new BLE_GAP_SVCS("SD_BLE_GAP_PPCP_GET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_DEVICE_NAME_SET = new BLE_GAP_SVCS("SD_BLE_GAP_DEVICE_NAME_SET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_DEVICE_NAME_GET = new BLE_GAP_SVCS("SD_BLE_GAP_DEVICE_NAME_GET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_AUTHENTICATE = new BLE_GAP_SVCS("SD_BLE_GAP_AUTHENTICATE");
  public final static BLE_GAP_SVCS SD_BLE_GAP_SEC_PARAMS_REPLY = new BLE_GAP_SVCS("SD_BLE_GAP_SEC_PARAMS_REPLY");
  public final static BLE_GAP_SVCS SD_BLE_GAP_AUTH_KEY_REPLY = new BLE_GAP_SVCS("SD_BLE_GAP_AUTH_KEY_REPLY");
  public final static BLE_GAP_SVCS SD_BLE_GAP_LESC_DHKEY_REPLY = new BLE_GAP_SVCS("SD_BLE_GAP_LESC_DHKEY_REPLY");
  public final static BLE_GAP_SVCS SD_BLE_GAP_KEYPRESS_NOTIFY = new BLE_GAP_SVCS("SD_BLE_GAP_KEYPRESS_NOTIFY");
  public final static BLE_GAP_SVCS SD_BLE_GAP_LESC_OOB_DATA_GET = new BLE_GAP_SVCS("SD_BLE_GAP_LESC_OOB_DATA_GET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_LESC_OOB_DATA_SET = new BLE_GAP_SVCS("SD_BLE_GAP_LESC_OOB_DATA_SET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_ENCRYPT = new BLE_GAP_SVCS("SD_BLE_GAP_ENCRYPT");
  public final static BLE_GAP_SVCS SD_BLE_GAP_SEC_INFO_REPLY = new BLE_GAP_SVCS("SD_BLE_GAP_SEC_INFO_REPLY");
  public final static BLE_GAP_SVCS SD_BLE_GAP_CONN_SEC_GET = new BLE_GAP_SVCS("SD_BLE_GAP_CONN_SEC_GET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_RSSI_START = new BLE_GAP_SVCS("SD_BLE_GAP_RSSI_START");
  public final static BLE_GAP_SVCS SD_BLE_GAP_RSSI_STOP = new BLE_GAP_SVCS("SD_BLE_GAP_RSSI_STOP");
  public final static BLE_GAP_SVCS SD_BLE_GAP_SCAN_START = new BLE_GAP_SVCS("SD_BLE_GAP_SCAN_START");
  public final static BLE_GAP_SVCS SD_BLE_GAP_SCAN_STOP = new BLE_GAP_SVCS("SD_BLE_GAP_SCAN_STOP");
  public final static BLE_GAP_SVCS SD_BLE_GAP_CONNECT = new BLE_GAP_SVCS("SD_BLE_GAP_CONNECT");
  public final static BLE_GAP_SVCS SD_BLE_GAP_CONNECT_CANCEL = new BLE_GAP_SVCS("SD_BLE_GAP_CONNECT_CANCEL");
  public final static BLE_GAP_SVCS SD_BLE_GAP_RSSI_GET = new BLE_GAP_SVCS("SD_BLE_GAP_RSSI_GET");
  public final static BLE_GAP_SVCS SD_BLE_GAP_PHY_UPDATE = new BLE_GAP_SVCS("SD_BLE_GAP_PHY_UPDATE");
  public final static BLE_GAP_SVCS SD_BLE_GAP_DATA_LENGTH_UPDATE = new BLE_GAP_SVCS("SD_BLE_GAP_DATA_LENGTH_UPDATE");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static BLE_GAP_SVCS swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + BLE_GAP_SVCS.class + " with value " + swigValue);
  }

  private BLE_GAP_SVCS(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private BLE_GAP_SVCS(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private BLE_GAP_SVCS(String swigName, BLE_GAP_SVCS swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static BLE_GAP_SVCS[] swigValues = { SD_BLE_GAP_ADDR_SET, SD_BLE_GAP_ADDR_GET, SD_BLE_GAP_WHITELIST_SET, SD_BLE_GAP_DEVICE_IDENTITIES_SET, SD_BLE_GAP_PRIVACY_SET, SD_BLE_GAP_PRIVACY_GET, SD_BLE_GAP_ADV_DATA_SET, SD_BLE_GAP_ADV_START, SD_BLE_GAP_ADV_STOP, SD_BLE_GAP_CONN_PARAM_UPDATE, SD_BLE_GAP_DISCONNECT, SD_BLE_GAP_TX_POWER_SET, SD_BLE_GAP_APPEARANCE_SET, SD_BLE_GAP_APPEARANCE_GET, SD_BLE_GAP_PPCP_SET, SD_BLE_GAP_PPCP_GET, SD_BLE_GAP_DEVICE_NAME_SET, SD_BLE_GAP_DEVICE_NAME_GET, SD_BLE_GAP_AUTHENTICATE, SD_BLE_GAP_SEC_PARAMS_REPLY, SD_BLE_GAP_AUTH_KEY_REPLY, SD_BLE_GAP_LESC_DHKEY_REPLY, SD_BLE_GAP_KEYPRESS_NOTIFY, SD_BLE_GAP_LESC_OOB_DATA_GET, SD_BLE_GAP_LESC_OOB_DATA_SET, SD_BLE_GAP_ENCRYPT, SD_BLE_GAP_SEC_INFO_REPLY, SD_BLE_GAP_CONN_SEC_GET, SD_BLE_GAP_RSSI_START, SD_BLE_GAP_RSSI_STOP, SD_BLE_GAP_SCAN_START, SD_BLE_GAP_SCAN_STOP, SD_BLE_GAP_CONNECT, SD_BLE_GAP_CONNECT_CANCEL, SD_BLE_GAP_RSSI_GET, SD_BLE_GAP_PHY_UPDATE, SD_BLE_GAP_DATA_LENGTH_UPDATE };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

